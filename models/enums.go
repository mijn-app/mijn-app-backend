// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "MijnApp": Enums
//
// Command:
// $ goagen
// --design=github.com/mijn-app/mijn-app-backend/design
// --out=$(GOPATH)/src/github.com/mijn-app/mijn-app-backend
// --version=v1.4.1

package models

import (
	"database/sql/driver"
	"fmt"
)

// JourneyPublished Enum
type JourneyPublished int64

const (
	JourneyPublishedPRIVATE   JourneyPublished = 1
	JourneyPublishedPUBLISHED JourneyPublished = 2
)

var journeyPublishedStrings = map[int64]string{
	1: "PRIVATE",
	2: "PUBLISHED",
}

var journeyPublishedStringMap = map[string]JourneyPublished{
	"PRIVATE":   JourneyPublishedPRIVATE,
	"PUBLISHED": JourneyPublishedPUBLISHED,
}

func (u *JourneyPublished) Scan(value interface{}) error {
	i, ok := value.(int64)
	if !ok {
		return fmt.Errorf("could not cast value %v to int64", value)
	}
	*u = JourneyPublished(i)
	return nil
}
func (u *JourneyPublished) ScanFromString(name string) error {
	var ok bool
	*u, ok = journeyPublishedStringMap[name]
	if !ok {
		return fmt.Errorf("%s is not a valid name for a value of JourneyPublished", name)
	}
	return nil
}
func (u JourneyPublished) Value() (driver.Value, error) { return int64(u), nil }
func (u JourneyPublished) String() string {
	if u == 0 {
		return "undefined"
	}
	return journeyPublishedStrings[int64(u)]
}
func (u JourneyPublished) AllStrings() map[int64]string { return journeyPublishedStrings }

// JourneyShared Enum
type JourneyShared int64

const (
	JourneySharedUNSHARED JourneyShared = 1
	JourneySharedSHARED   JourneyShared = 2
)

var journeySharedStrings = map[int64]string{
	1: "UNSHARED",
	2: "SHARED",
}

var journeySharedStringMap = map[string]JourneyShared{
	"UNSHARED": JourneySharedUNSHARED,
	"SHARED":   JourneySharedSHARED,
}

func (u *JourneyShared) Scan(value interface{}) error {
	i, ok := value.(int64)
	if !ok {
		return fmt.Errorf("could not cast value %v to int64", value)
	}
	*u = JourneyShared(i)
	return nil
}
func (u *JourneyShared) ScanFromString(name string) error {
	var ok bool
	*u, ok = journeySharedStringMap[name]
	if !ok {
		return fmt.Errorf("%s is not a valid name for a value of JourneyShared", name)
	}
	return nil
}
func (u JourneyShared) Value() (driver.Value, error) { return int64(u), nil }
func (u JourneyShared) String() string {
	if u == 0 {
		return "undefined"
	}
	return journeySharedStrings[int64(u)]
}
func (u JourneyShared) AllStrings() map[int64]string { return journeySharedStrings }

// OrderStatus Enum
type OrderStatus int64

const (
	OrderStatusPENDING  OrderStatus = 1
	OrderStatusAPPROVED OrderStatus = 2
	OrderStatusDECLINED OrderStatus = 3
)

var orderStatusStrings = map[int64]string{
	1: "PENDING",
	2: "APPROVED",
	3: "DECLINED",
}

var orderStatusStringMap = map[string]OrderStatus{
	"PENDING":  OrderStatusPENDING,
	"APPROVED": OrderStatusAPPROVED,
	"DECLINED": OrderStatusDECLINED,
}

func (u *OrderStatus) Scan(value interface{}) error {
	i, ok := value.(int64)
	if !ok {
		return fmt.Errorf("could not cast value %v to int64", value)
	}
	*u = OrderStatus(i)
	return nil
}
func (u *OrderStatus) ScanFromString(name string) error {
	var ok bool
	*u, ok = orderStatusStringMap[name]
	if !ok {
		return fmt.Errorf("%s is not a valid name for a value of OrderStatus", name)
	}
	return nil
}
func (u OrderStatus) Value() (driver.Value, error) { return int64(u), nil }
func (u OrderStatus) String() string {
	if u == 0 {
		return "undefined"
	}
	return orderStatusStrings[int64(u)]
}
func (u OrderStatus) AllStrings() map[int64]string { return orderStatusStrings }

// OrganisationAPIType Enum
type OrganisationAPIType int64

const (
	OrganisationAPITypeCALENDAR OrganisationAPIType = 1
)

var organisationAPITypeStrings = map[int64]string{
	1: "CALENDAR",
}

var organisationAPITypeStringMap = map[string]OrganisationAPIType{
	"CALENDAR": OrganisationAPITypeCALENDAR,
}

func (u *OrganisationAPIType) Scan(value interface{}) error {
	i, ok := value.(int64)
	if !ok {
		return fmt.Errorf("could not cast value %v to int64", value)
	}
	*u = OrganisationAPIType(i)
	return nil
}
func (u *OrganisationAPIType) ScanFromString(name string) error {
	var ok bool
	*u, ok = organisationAPITypeStringMap[name]
	if !ok {
		return fmt.Errorf("%s is not a valid name for a value of OrganisationAPIType", name)
	}
	return nil
}
func (u OrganisationAPIType) Value() (driver.Value, error) { return int64(u), nil }
func (u OrganisationAPIType) String() string {
	if u == 0 {
		return "undefined"
	}
	return organisationAPITypeStrings[int64(u)]
}
func (u OrganisationAPIType) AllStrings() map[int64]string { return organisationAPITypeStrings }

// UserGender Enum
type UserGender int64

const (
	UserGenderMale   UserGender = 1
	UserGenderFemale UserGender = 2
	UserGenderOther  UserGender = 3
)

var userGenderStrings = map[int64]string{
	1: "Male",
	2: "Female",
	3: "Other",
}

var userGenderStringMap = map[string]UserGender{
	"Male":   UserGenderMale,
	"Female": UserGenderFemale,
	"Other":  UserGenderOther,
}

func (u *UserGender) Scan(value interface{}) error {
	i, ok := value.(int64)
	if !ok {
		return fmt.Errorf("could not cast value %v to int64", value)
	}
	*u = UserGender(i)
	return nil
}
func (u *UserGender) ScanFromString(name string) error {
	var ok bool
	*u, ok = userGenderStringMap[name]
	if !ok {
		return fmt.Errorf("%s is not a valid name for a value of UserGender", name)
	}
	return nil
}
func (u UserGender) Value() (driver.Value, error) { return int64(u), nil }
func (u UserGender) String() string {
	if u == 0 {
		return "undefined"
	}
	return userGenderStrings[int64(u)]
}
func (u UserGender) AllStrings() map[int64]string { return userGenderStrings }

// UserOrganisationMemberRoles Enum
type UserOrganisationMemberRoles int64

const (
	UserOrganisationMemberRolesDECLINED  UserOrganisationMemberRoles = 1
	UserOrganisationMemberRolesCANCELLED UserOrganisationMemberRoles = 2
	UserOrganisationMemberRolesREQUESTED UserOrganisationMemberRoles = 3
	UserOrganisationMemberRolesMEMBER    UserOrganisationMemberRoles = 4
	UserOrganisationMemberRolesEDITOR    UserOrganisationMemberRoles = 5
	UserOrganisationMemberRolesADMIN     UserOrganisationMemberRoles = 6
)

var userOrganisationMemberRolesStrings = map[int64]string{
	1: "DECLINED",
	2: "CANCELLED",
	3: "REQUESTED",
	4: "MEMBER",
	5: "EDITOR",
	6: "ADMIN",
}

var userOrganisationMemberRolesStringMap = map[string]UserOrganisationMemberRoles{
	"DECLINED":  UserOrganisationMemberRolesDECLINED,
	"CANCELLED": UserOrganisationMemberRolesCANCELLED,
	"REQUESTED": UserOrganisationMemberRolesREQUESTED,
	"MEMBER":    UserOrganisationMemberRolesMEMBER,
	"EDITOR":    UserOrganisationMemberRolesEDITOR,
	"ADMIN":     UserOrganisationMemberRolesADMIN,
}

func (u *UserOrganisationMemberRoles) Scan(value interface{}) error {
	i, ok := value.(int64)
	if !ok {
		return fmt.Errorf("could not cast value %v to int64", value)
	}
	*u = UserOrganisationMemberRoles(i)
	return nil
}
func (u *UserOrganisationMemberRoles) ScanFromString(name string) error {
	var ok bool
	*u, ok = userOrganisationMemberRolesStringMap[name]
	if !ok {
		return fmt.Errorf("%s is not a valid name for a value of UserOrganisationMemberRoles", name)
	}
	return nil
}
func (u UserOrganisationMemberRoles) Value() (driver.Value, error) { return int64(u), nil }
func (u UserOrganisationMemberRoles) String() string {
	if u == 0 {
		return "undefined"
	}
	return userOrganisationMemberRolesStrings[int64(u)]
}
func (u UserOrganisationMemberRoles) AllStrings() map[int64]string {
	return userOrganisationMemberRolesStrings
}

// UserRoles Enum
type UserRoles int64

const (
	UserRolesUSER      UserRoles = 1
	UserRolesDASHBOARD UserRoles = 2
	UserRolesADMIN     UserRoles = 3
	UserRolesBANNED    UserRoles = 4
)

var userRolesStrings = map[int64]string{
	1: "USER",
	2: "DASHBOARD",
	3: "ADMIN",
	4: "BANNED",
}

var userRolesStringMap = map[string]UserRoles{
	"USER":      UserRolesUSER,
	"DASHBOARD": UserRolesDASHBOARD,
	"ADMIN":     UserRolesADMIN,
	"BANNED":    UserRolesBANNED,
}

func (u *UserRoles) Scan(value interface{}) error {
	i, ok := value.(int64)
	if !ok {
		return fmt.Errorf("could not cast value %v to int64", value)
	}
	*u = UserRoles(i)
	return nil
}
func (u *UserRoles) ScanFromString(name string) error {
	var ok bool
	*u, ok = userRolesStringMap[name]
	if !ok {
		return fmt.Errorf("%s is not a valid name for a value of UserRoles", name)
	}
	return nil
}
func (u UserRoles) Value() (driver.Value, error) { return int64(u), nil }
func (u UserRoles) String() string {
	if u == 0 {
		return "undefined"
	}
	return userRolesStrings[int64(u)]
}
func (u UserRoles) AllStrings() map[int64]string { return userRolesStrings }
