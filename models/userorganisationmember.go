// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "MijnApp": Models
//
// Command:
// $ goagen
// --design=github.com/mijn-app/mijn-app-backend/design
// --out=$(GOPATH)/src/github.com/mijn-app/mijn-app-backend
// --version=v1.4.1

package models

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
	"github.com/mijn-app/mijn-app-backend/app"
	"time"
)

// Model to give a user permissions to modify organisation data.
type UserOrganisationMember struct {
	ID             uuid.UUID `sql:"type:uuid;default:uuid_generate_v4()" gorm:"primary_key"` // primary key
	CreatedAt      time.Time
	DeletedAt      *time.Time
	OrganisationID uuid.UUID                   `sql:"type:uuid" gorm:"index:idx_user_organisation_member_organisation_id"` // Belongs To Organisation
	Role           UserOrganisationMemberRoles `sql:"type:smallint"`                                                       // enum UserOrganisationMemberRoles
	UpdatedAt      time.Time
	UserID         uuid.UUID `sql:"type:uuid" gorm:"index:idx_user_organisation_member_user_id"` // Belongs To User
	Organisation   Organisation
	User           User
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m UserOrganisationMember) TableName() string {
	return "user_organisation_members"

}

// UserOrganisationMemberDB is the implementation of the storage interface for
// UserOrganisationMember.
type UserOrganisationMemberDB struct {
	Db *gorm.DB
}

// NewUserOrganisationMemberDB creates a new storage type.
func NewUserOrganisationMemberDB(db *gorm.DB) *UserOrganisationMemberDB {
	return &UserOrganisationMemberDB{Db: db}
}

// DB returns the underlying database.
func (m *UserOrganisationMemberDB) DB() interface{} {
	return m.Db
}

// UserOrganisationMemberStorage represents the storage interface.
type UserOrganisationMemberStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*UserOrganisationMember, error)
	Get(ctx context.Context, id uuid.UUID) (*UserOrganisationMember, error)
	Add(ctx context.Context, userorganisationmember *UserOrganisationMember) error
	Update(ctx context.Context, userorganisationmember *UserOrganisationMember) error
	Delete(ctx context.Context, id uuid.UUID) error

	ListUserorganisationmember(ctx context.Context, organisationID int, userID int) []*app.Userorganisationmember
	OneUserorganisationmember(ctx context.Context, id uuid.UUID, organisationID int, userID int) (*app.Userorganisationmember, error)
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *UserOrganisationMemberDB) TableName() string {
	return "user_organisation_members"

}

// Belongs To Relationships

// UserOrganisationMemberFilterByOrganisation is a gorm filter for a Belongs To relationship.
func UserOrganisationMemberFilterByOrganisation(organisationID uuid.UUID, originaldb *gorm.DB) func(db *gorm.DB) *gorm.DB {

	if organisationID != uuid.Nil {

		return func(db *gorm.DB) *gorm.DB {
			return db.Where("organisation_id = ?", organisationID)
		}
	}
	return func(db *gorm.DB) *gorm.DB { return db }
}

// Belongs To Relationships

// UserOrganisationMemberFilterByUser is a gorm filter for a Belongs To relationship.
func UserOrganisationMemberFilterByUser(userID uuid.UUID, originaldb *gorm.DB) func(db *gorm.DB) *gorm.DB {

	if userID != uuid.Nil {

		return func(db *gorm.DB) *gorm.DB {
			return db.Where("user_id = ?", userID)
		}
	}
	return func(db *gorm.DB) *gorm.DB { return db }
}

// CRUD Functions

// Get returns a single UserOrganisationMember as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *UserOrganisationMemberDB) Get(ctx context.Context, id uuid.UUID) (*UserOrganisationMember, error) {
	defer goa.MeasureSince([]string{"goa", "db", "userOrganisationMember", "get"}, time.Now())

	var native UserOrganisationMember
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of UserOrganisationMember
func (m *UserOrganisationMemberDB) List(ctx context.Context) ([]*UserOrganisationMember, error) {
	defer goa.MeasureSince([]string{"goa", "db", "userOrganisationMember", "list"}, time.Now())

	var objs []*UserOrganisationMember
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *UserOrganisationMemberDB) Add(ctx context.Context, model *UserOrganisationMember) error {
	defer goa.MeasureSince([]string{"goa", "db", "userOrganisationMember", "add"}, time.Now())

	model.ID = uuid.Must(uuid.NewV4())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding UserOrganisationMember", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *UserOrganisationMemberDB) Update(ctx context.Context, model *UserOrganisationMember) error {
	defer goa.MeasureSince([]string{"goa", "db", "userOrganisationMember", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating UserOrganisationMember", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *UserOrganisationMemberDB) Delete(ctx context.Context, id uuid.UUID) error {
	defer goa.MeasureSince([]string{"goa", "db", "userOrganisationMember", "delete"}, time.Now())

	err := m.Db.Where("id = ?", id).Delete(&UserOrganisationMember{}).Error
	if err != nil {
		goa.LogError(ctx, "error deleting UserOrganisationMember", "error", err.Error())
		return err
	}

	return nil
}
