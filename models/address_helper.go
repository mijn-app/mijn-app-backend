// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "MijnApp": Model Helpers
//
// Command:
// $ goagen
// --design=github.com/mijn-app/mijn-app-backend/design
// --out=$(GOPATH)/src/github.com/mijn-app/mijn-app-backend
// --version=v1.4.1

package models

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
	"github.com/mijn-app/mijn-app-backend/app"
	"time"
)

// MediaType Retrieval Functions

// ListAddress returns an array of view: default.
func (m *AddressDB) ListAddress(ctx context.Context) []*app.Address {
	defer goa.MeasureSince([]string{"goa", "db", "address", "listaddress"}, time.Now())

	var native []*Address
	var objs []*app.Address
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Address", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.AddressToAddress())
	}

	return objs
}

// AddressToAddress loads a Address and builds the default view of media type Address.
func (m *Address) AddressToAddress() *app.Address {
	address := &app.Address{}
	address.Country = &m.Country
	address.HouseNumber = &m.HouseNumber
	address.ID = &m.ID
	address.Location = &m.Location
	address.Street = &m.Street
	address.UserID = &m.UserID
	address.Zipcode = &m.Zipcode

	return address
}

// OneAddress loads a Address and builds the default view of media type Address.
func (m *AddressDB) OneAddress(ctx context.Context, id uuid.UUID) (*app.Address, error) {
	defer goa.MeasureSince([]string{"goa", "db", "address", "oneaddress"}, time.Now())

	var native Address
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Address", "error", err.Error())
		return nil, err
	}

	view := *native.AddressToAddress()
	return &view, err
}
