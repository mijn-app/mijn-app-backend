// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "MijnApp": Models
//
// Command:
// $ goagen
// --design=github.com/mijn-app/mijn-app-backend/design
// --out=$(GOPATH)/src/github.com/mijn-app/mijn-app-backend
// --version=v1.4.1

package models

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
	"github.com/mijn-app/mijn-app-backend/app"
	"time"
)

// Addresses for most likey users
type Address struct {
	ID          uuid.UUID `sql:"type:uuid;default:uuid_generate_v4()" gorm:"primary_key"` // primary key
	Country     string
	CreatedAt   time.Time
	DeletedAt   *time.Time
	HouseNumber string
	Location    string
	Street      string
	UpdatedAt   time.Time
	UserID      uuid.UUID `sql:"type:uuid" gorm:"index:idx_address_user_id"` // has one Address
	Zipcode     string
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Address) TableName() string {
	return "addresses"

}

// AddressDB is the implementation of the storage interface for
// Address.
type AddressDB struct {
	Db *gorm.DB
}

// NewAddressDB creates a new storage type.
func NewAddressDB(db *gorm.DB) *AddressDB {
	return &AddressDB{Db: db}
}

// DB returns the underlying database.
func (m *AddressDB) DB() interface{} {
	return m.Db
}

// AddressStorage represents the storage interface.
type AddressStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*Address, error)
	Get(ctx context.Context, id uuid.UUID) (*Address, error)
	Add(ctx context.Context, address *Address) error
	Update(ctx context.Context, address *Address) error
	Delete(ctx context.Context, id uuid.UUID) error

	ListAddress(ctx context.Context) []*app.Address
	OneAddress(ctx context.Context, id uuid.UUID) (*app.Address, error)

	UpdateFromCreateAddressPayload(ctx context.Context, payload *app.CreateAddressPayload, id uuid.UUID) error

	UpdateFromUpdateAddressPayload(ctx context.Context, payload *app.UpdateAddressPayload, id uuid.UUID) error
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *AddressDB) TableName() string {
	return "addresses"

}

// CRUD Functions

// Get returns a single Address as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *AddressDB) Get(ctx context.Context, id uuid.UUID) (*Address, error) {
	defer goa.MeasureSince([]string{"goa", "db", "address", "get"}, time.Now())

	var native Address
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Address
func (m *AddressDB) List(ctx context.Context) ([]*Address, error) {
	defer goa.MeasureSince([]string{"goa", "db", "address", "list"}, time.Now())

	var objs []*Address
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *AddressDB) Add(ctx context.Context, model *Address) error {
	defer goa.MeasureSince([]string{"goa", "db", "address", "add"}, time.Now())

	model.ID = uuid.Must(uuid.NewV4())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding Address", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *AddressDB) Update(ctx context.Context, model *Address) error {
	defer goa.MeasureSince([]string{"goa", "db", "address", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating Address", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *AddressDB) Delete(ctx context.Context, id uuid.UUID) error {
	defer goa.MeasureSince([]string{"goa", "db", "address", "delete"}, time.Now())

	err := m.Db.Where("id = ?", id).Delete(&Address{}).Error
	if err != nil {
		goa.LogError(ctx, "error deleting Address", "error", err.Error())
		return err
	}

	return nil
}

// AddressFromCreateAddressPayload Converts source CreateAddressPayload to target Address model
// only copying the non-nil fields from the source.
func AddressFromCreateAddressPayload(payload *app.CreateAddressPayload) *Address {
	address := &Address{}
	address.Country = payload.Country
	address.HouseNumber = payload.HouseNumber
	address.Location = payload.Location
	address.Street = payload.Street
	address.Zipcode = payload.Zipcode

	return address
}

// UpdateFromCreateAddressPayload applies non-nil changes from CreateAddressPayload to the model and saves it
func (m *AddressDB) UpdateFromCreateAddressPayload(ctx context.Context, payload *app.CreateAddressPayload, id uuid.UUID) error {
	defer goa.MeasureSince([]string{"goa", "db", "address", "updatefromcreateAddressPayload"}, time.Now())

	var obj Address
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&obj).Error
	if err != nil {
		goa.LogError(ctx, "error retrieving Address", "error", err.Error())
		return err
	}
	obj.Country = payload.Country
	obj.HouseNumber = payload.HouseNumber
	obj.Location = payload.Location
	obj.Street = payload.Street
	obj.Zipcode = payload.Zipcode

	err = m.Db.Save(&obj).Error
	return err
}

// AddressFromUpdateAddressPayload Converts source UpdateAddressPayload to target Address model
// only copying the non-nil fields from the source.
func AddressFromUpdateAddressPayload(payload *app.UpdateAddressPayload) *Address {
	address := &Address{}
	if payload.Country != nil {
		address.Country = *payload.Country
	}
	if payload.HouseNumber != nil {
		address.HouseNumber = *payload.HouseNumber
	}
	if payload.Location != nil {
		address.Location = *payload.Location
	}
	if payload.Street != nil {
		address.Street = *payload.Street
	}
	if payload.Zipcode != nil {
		address.Zipcode = *payload.Zipcode
	}

	return address
}

// UpdateFromUpdateAddressPayload applies non-nil changes from UpdateAddressPayload to the model and saves it
func (m *AddressDB) UpdateFromUpdateAddressPayload(ctx context.Context, payload *app.UpdateAddressPayload, id uuid.UUID) error {
	defer goa.MeasureSince([]string{"goa", "db", "address", "updatefromupdateAddressPayload"}, time.Now())

	var obj Address
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&obj).Error
	if err != nil {
		goa.LogError(ctx, "error retrieving Address", "error", err.Error())
		return err
	}
	if payload.Country != nil {
		obj.Country = *payload.Country
	}
	if payload.HouseNumber != nil {
		obj.HouseNumber = *payload.HouseNumber
	}
	if payload.Location != nil {
		obj.Location = *payload.Location
	}
	if payload.Street != nil {
		obj.Street = *payload.Street
	}
	if payload.Zipcode != nil {
		obj.Zipcode = *payload.Zipcode
	}

	err = m.Db.Save(&obj).Error
	return err
}
