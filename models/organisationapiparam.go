// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "MijnApp": Models
//
// Command:
// $ goagen
// --design=github.com/mijn-app/mijn-app-backend/design
// --out=$(GOPATH)/src/github.com/mijn-app/mijn-app-backend
// --version=v1.4.1

package models

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
	"github.com/mijn-app/mijn-app-backend/app"
	"time"
)

// Model to store an API param an organisation api endpoint.
type OrganisationAPIParam struct {
	ID                uuid.UUID `sql:"type:uuid;default:uuid_generate_v4()" gorm:"primary_key"` // primary key
	CreatedAt         time.Time
	DeletedAt         *time.Time
	Key               string
	Name              string
	OrganisationAPIID uuid.UUID `sql:"type:uuid" gorm:"index:idx_organisation_api_param_organisation_apiid"` // Belongs To OrganisationAPI
	UpdatedAt         time.Time
	OrganisationAPI   OrganisationAPI
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m OrganisationAPIParam) TableName() string {
	return "organisation_a_p_i_params"

}

// OrganisationAPIParamDB is the implementation of the storage interface for
// OrganisationAPIParam.
type OrganisationAPIParamDB struct {
	Db *gorm.DB
}

// NewOrganisationAPIParamDB creates a new storage type.
func NewOrganisationAPIParamDB(db *gorm.DB) *OrganisationAPIParamDB {
	return &OrganisationAPIParamDB{Db: db}
}

// DB returns the underlying database.
func (m *OrganisationAPIParamDB) DB() interface{} {
	return m.Db
}

// OrganisationAPIParamStorage represents the storage interface.
type OrganisationAPIParamStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*OrganisationAPIParam, error)
	Get(ctx context.Context, id uuid.UUID) (*OrganisationAPIParam, error)
	Add(ctx context.Context, organisationapiparam *OrganisationAPIParam) error
	Update(ctx context.Context, organisationapiparam *OrganisationAPIParam) error
	Delete(ctx context.Context, id uuid.UUID) error

	ListOrganisationapiparam(ctx context.Context, organisationAPIID int) []*app.Organisationapiparam
	OneOrganisationapiparam(ctx context.Context, id uuid.UUID, organisationAPIID int) (*app.Organisationapiparam, error)
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *OrganisationAPIParamDB) TableName() string {
	return "organisation_a_p_i_params"

}

// Belongs To Relationships

// OrganisationAPIParamFilterByOrganisationAPI is a gorm filter for a Belongs To relationship.
func OrganisationAPIParamFilterByOrganisationAPI(organisationAPIID uuid.UUID, originaldb *gorm.DB) func(db *gorm.DB) *gorm.DB {

	if organisationAPIID != uuid.Nil {

		return func(db *gorm.DB) *gorm.DB {
			return db.Where("organisation_api_id = ?", organisationAPIID)
		}
	}
	return func(db *gorm.DB) *gorm.DB { return db }
}

// CRUD Functions

// Get returns a single OrganisationAPIParam as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *OrganisationAPIParamDB) Get(ctx context.Context, id uuid.UUID) (*OrganisationAPIParam, error) {
	defer goa.MeasureSince([]string{"goa", "db", "organisationAPIParam", "get"}, time.Now())

	var native OrganisationAPIParam
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of OrganisationAPIParam
func (m *OrganisationAPIParamDB) List(ctx context.Context) ([]*OrganisationAPIParam, error) {
	defer goa.MeasureSince([]string{"goa", "db", "organisationAPIParam", "list"}, time.Now())

	var objs []*OrganisationAPIParam
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *OrganisationAPIParamDB) Add(ctx context.Context, model *OrganisationAPIParam) error {
	defer goa.MeasureSince([]string{"goa", "db", "organisationAPIParam", "add"}, time.Now())

	model.ID = uuid.Must(uuid.NewV4())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding OrganisationAPIParam", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *OrganisationAPIParamDB) Update(ctx context.Context, model *OrganisationAPIParam) error {
	defer goa.MeasureSince([]string{"goa", "db", "organisationAPIParam", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating OrganisationAPIParam", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *OrganisationAPIParamDB) Delete(ctx context.Context, id uuid.UUID) error {
	defer goa.MeasureSince([]string{"goa", "db", "organisationAPIParam", "delete"}, time.Now())

	err := m.Db.Where("id = ?", id).Delete(&OrganisationAPIParam{}).Error
	if err != nil {
		goa.LogError(ctx, "error deleting OrganisationAPIParam", "error", err.Error())
		return err
	}

	return nil
}
