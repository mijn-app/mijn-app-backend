// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "MijnApp": Model Helpers
//
// Command:
// $ goagen
// --design=github.com/mijn-app/mijn-app-backend/design
// --out=$(GOPATH)/src/github.com/mijn-app/mijn-app-backend
// --version=v1.4.1

package models

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
	"github.com/mijn-app/mijn-app-backend/app"
	"time"
)

// MediaType Retrieval Functions

// ListOrganisationapiparam returns an array of view: default.
func (m *OrganisationAPIParamDB) ListOrganisationapiparam(ctx context.Context, organisationAPIID uuid.UUID) []*app.Organisationapiparam {
	defer goa.MeasureSince([]string{"goa", "db", "organisationapiparam", "listorganisationapiparam"}, time.Now())

	var native []*OrganisationAPIParam
	var objs []*app.Organisationapiparam
	err := m.Db.Scopes(OrganisationAPIParamFilterByOrganisationAPI(organisationAPIID, m.Db)).Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing OrganisationAPIParam", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.OrganisationAPIParamToOrganisationapiparam())
	}

	return objs
}

// OrganisationAPIParamToOrganisationapiparam loads a OrganisationAPIParam and builds the default view of media type Organisationapiparam.
func (m *OrganisationAPIParam) OrganisationAPIParamToOrganisationapiparam() *app.Organisationapiparam {
	organisationapiparam := &app.Organisationapiparam{}
	organisationapiparam.ID = &m.ID
	organisationapiparam.Key = &m.Key
	organisationapiparam.Name = &m.Name

	return organisationapiparam
}

// OneOrganisationapiparam loads a OrganisationAPIParam and builds the default view of media type Organisationapiparam.
func (m *OrganisationAPIParamDB) OneOrganisationapiparam(ctx context.Context, id uuid.UUID, organisationAPIID uuid.UUID) (*app.Organisationapiparam, error) {
	defer goa.MeasureSince([]string{"goa", "db", "organisationapiparam", "oneorganisationapiparam"}, time.Now())

	var native OrganisationAPIParam
	err := m.Db.Scopes(OrganisationAPIParamFilterByOrganisationAPI(organisationAPIID, m.Db)).Table(m.TableName()).Preload("OrganisationAPI").Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting OrganisationAPIParam", "error", err.Error())
		return nil, err
	}

	view := *native.OrganisationAPIParamToOrganisationapiparam()
	return &view, err
}
