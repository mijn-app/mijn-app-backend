// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "MijnApp": Models
//
// Command:
// $ goagen
// --design=github.com/mijn-app/mijn-app-backend/design
// --out=$(GOPATH)/src/github.com/mijn-app/mijn-app-backend
// --version=v1.4.1

package models

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
	"github.com/mijn-app/mijn-app-backend/app"
	"time"
)

// Organisation model
type Organisation struct {
	ID        uuid.UUID `sql:"type:uuid;default:uuid_generate_v4()" gorm:"primary_key"` // primary key
	CreatedAt time.Time
	DeletedAt *time.Time
	Name      string
	UpdatedAt time.Time
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Organisation) TableName() string {
	return "organisations"

}

// OrganisationDB is the implementation of the storage interface for
// Organisation.
type OrganisationDB struct {
	Db *gorm.DB
}

// NewOrganisationDB creates a new storage type.
func NewOrganisationDB(db *gorm.DB) *OrganisationDB {
	return &OrganisationDB{Db: db}
}

// DB returns the underlying database.
func (m *OrganisationDB) DB() interface{} {
	return m.Db
}

// OrganisationStorage represents the storage interface.
type OrganisationStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*Organisation, error)
	Get(ctx context.Context, id uuid.UUID) (*Organisation, error)
	Add(ctx context.Context, organisation *Organisation) error
	Update(ctx context.Context, organisation *Organisation) error
	Delete(ctx context.Context, id uuid.UUID) error

	ListOrganisation(ctx context.Context) []*app.Organisation
	OneOrganisation(ctx context.Context, id uuid.UUID) (*app.Organisation, error)
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *OrganisationDB) TableName() string {
	return "organisations"

}

// CRUD Functions

// Get returns a single Organisation as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *OrganisationDB) Get(ctx context.Context, id uuid.UUID) (*Organisation, error) {
	defer goa.MeasureSince([]string{"goa", "db", "organisation", "get"}, time.Now())

	var native Organisation
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Organisation
func (m *OrganisationDB) List(ctx context.Context) ([]*Organisation, error) {
	defer goa.MeasureSince([]string{"goa", "db", "organisation", "list"}, time.Now())

	var objs []*Organisation
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *OrganisationDB) Add(ctx context.Context, model *Organisation) error {
	defer goa.MeasureSince([]string{"goa", "db", "organisation", "add"}, time.Now())

	model.ID = uuid.Must(uuid.NewV4())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding Organisation", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *OrganisationDB) Update(ctx context.Context, model *Organisation) error {
	defer goa.MeasureSince([]string{"goa", "db", "organisation", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating Organisation", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *OrganisationDB) Delete(ctx context.Context, id uuid.UUID) error {
	defer goa.MeasureSince([]string{"goa", "db", "organisation", "delete"}, time.Now())

	err := m.Db.Where("id = ?", id).Delete(&Organisation{}).Error
	if err != nil {
		goa.LogError(ctx, "error deleting Organisation", "error", err.Error())
		return err
	}

	return nil
}
