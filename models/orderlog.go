// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "MijnApp": Models
//
// Command:
// $ goagen
// --design=github.com/mijn-app/mijn-app-backend/design
// --out=$(GOPATH)/src/github.com/mijn-app/mijn-app-backend
// --version=v1.4.1

package models

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
	"github.com/mijn-app/mijn-app-backend/app"
	"time"
)

// Model to store a log-message for an order
type OrderLog struct {
	ID        uuid.UUID `sql:"type:uuid;default:uuid_generate_v4()" gorm:"primary_key"` // primary key
	CreatedAt time.Time
	DeletedAt *time.Time
	Message   string
	OrderID   uuid.UUID `sql:"type:uuid" gorm:"index:idx_order_log_order_id"` // Belongs To Order
	UpdatedAt time.Time
	UserID    uuid.UUID `sql:"type:uuid" gorm:"index:idx_order_log_user_id"` // The creator of the order log
	Order     Order
	User      User
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m OrderLog) TableName() string {
	return "order_logs"

}

// OrderLogDB is the implementation of the storage interface for
// OrderLog.
type OrderLogDB struct {
	Db *gorm.DB
}

// NewOrderLogDB creates a new storage type.
func NewOrderLogDB(db *gorm.DB) *OrderLogDB {
	return &OrderLogDB{Db: db}
}

// DB returns the underlying database.
func (m *OrderLogDB) DB() interface{} {
	return m.Db
}

// OrderLogStorage represents the storage interface.
type OrderLogStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*OrderLog, error)
	Get(ctx context.Context, id uuid.UUID) (*OrderLog, error)
	Add(ctx context.Context, orderlog *OrderLog) error
	Update(ctx context.Context, orderlog *OrderLog) error
	Delete(ctx context.Context, id uuid.UUID) error

	ListOrderlog(ctx context.Context, orderID int, userID int) []*app.Orderlog
	OneOrderlog(ctx context.Context, id uuid.UUID, orderID int, userID int) (*app.Orderlog, error)
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *OrderLogDB) TableName() string {
	return "order_logs"

}

// Belongs To Relationships

// OrderLogFilterByOrder is a gorm filter for a Belongs To relationship.
func OrderLogFilterByOrder(orderID uuid.UUID, originaldb *gorm.DB) func(db *gorm.DB) *gorm.DB {

	if orderID != uuid.Nil {

		return func(db *gorm.DB) *gorm.DB {
			return db.Where("order_id = ?", orderID)
		}
	}
	return func(db *gorm.DB) *gorm.DB { return db }
}

// Belongs To Relationships

// OrderLogFilterByUser is a gorm filter for a Belongs To relationship.
func OrderLogFilterByUser(userID uuid.UUID, originaldb *gorm.DB) func(db *gorm.DB) *gorm.DB {

	if userID != uuid.Nil {

		return func(db *gorm.DB) *gorm.DB {
			return db.Where("user_id = ?", userID)
		}
	}
	return func(db *gorm.DB) *gorm.DB { return db }
}

// CRUD Functions

// Get returns a single OrderLog as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *OrderLogDB) Get(ctx context.Context, id uuid.UUID) (*OrderLog, error) {
	defer goa.MeasureSince([]string{"goa", "db", "orderLog", "get"}, time.Now())

	var native OrderLog
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of OrderLog
func (m *OrderLogDB) List(ctx context.Context) ([]*OrderLog, error) {
	defer goa.MeasureSince([]string{"goa", "db", "orderLog", "list"}, time.Now())

	var objs []*OrderLog
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *OrderLogDB) Add(ctx context.Context, model *OrderLog) error {
	defer goa.MeasureSince([]string{"goa", "db", "orderLog", "add"}, time.Now())

	model.ID = uuid.Must(uuid.NewV4())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding OrderLog", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *OrderLogDB) Update(ctx context.Context, model *OrderLog) error {
	defer goa.MeasureSince([]string{"goa", "db", "orderLog", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating OrderLog", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *OrderLogDB) Delete(ctx context.Context, id uuid.UUID) error {
	defer goa.MeasureSince([]string{"goa", "db", "orderLog", "delete"}, time.Now())

	err := m.Db.Where("id = ?", id).Delete(&OrderLog{}).Error
	if err != nil {
		goa.LogError(ctx, "error deleting OrderLog", "error", err.Error())
		return err
	}

	return nil
}
