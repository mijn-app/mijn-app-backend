// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "MijnApp": Model Helpers
//
// Command:
// $ goagen
// --design=github.com/mijn-app/mijn-app-backend/design
// --out=$(GOPATH)/src/github.com/mijn-app/mijn-app-backend
// --version=v1.4.1

package models

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
	"github.com/mijn-app/mijn-app-backend/app"
	"time"
)

// MediaType Retrieval Functions

// ListOrderlog returns an array of view: default.
func (m *OrderLogDB) ListOrderlog(ctx context.Context, orderID uuid.UUID, userID uuid.UUID) []*app.Orderlog {
	defer goa.MeasureSince([]string{"goa", "db", "orderlog", "listorderlog"}, time.Now())

	var native []*OrderLog
	var objs []*app.Orderlog
	err := m.Db.Scopes(OrderLogFilterByOrder(orderID, m.Db), OrderLogFilterByUser(userID, m.Db)).Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing OrderLog", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.OrderLogToOrderlog())
	}

	return objs
}

// OrderLogToOrderlog loads a OrderLog and builds the default view of media type Orderlog.
func (m *OrderLog) OrderLogToOrderlog() *app.Orderlog {
	orderlog := &app.Orderlog{}
	orderlog.ID = &m.ID
	orderlog.Message = &m.Message

	return orderlog
}

// OneOrderlog loads a OrderLog and builds the default view of media type Orderlog.
func (m *OrderLogDB) OneOrderlog(ctx context.Context, id uuid.UUID, orderID uuid.UUID, userID uuid.UUID) (*app.Orderlog, error) {
	defer goa.MeasureSince([]string{"goa", "db", "orderlog", "oneorderlog"}, time.Now())

	var native OrderLog
	err := m.Db.Scopes(OrderLogFilterByOrder(orderID, m.Db), OrderLogFilterByUser(userID, m.Db)).Table(m.TableName()).Preload("Order").Preload("User").Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting OrderLog", "error", err.Error())
		return nil, err
	}

	view := *native.OrderLogToOrderlog()
	return &view, err
}
