// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "MijnApp": Models
//
// Command:
// $ goagen
// --design=github.com/mijn-app/mijn-app-backend/design
// --out=$(GOPATH)/src/github.com/mijn-app/mijn-app-backend
// --version=v1.4.1

package models

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
	"github.com/mijn-app/mijn-app-backend/app"
	"time"
)

// Model to store an API endpoint for extra data from an organisation.
type OrganisationAPI struct {
	ID             uuid.UUID `sql:"type:uuid;default:uuid_generate_v4()" gorm:"primary_key"` // primary key
	CreatedAt      time.Time
	DeletedAt      *time.Time
	Name           string
	OrganisationID uuid.UUID           `sql:"type:uuid" gorm:"index:idx_organisation_api_organisation_id"` // Belongs To Organisation
	Type           OrganisationAPIType `sql:"type:smallint"`                                               // enum OrganisationAPIType
	URL            string
	UpdatedAt      time.Time
	Organisation   Organisation
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m OrganisationAPI) TableName() string {
	return "organisation_a_p_i_s"

}

// OrganisationAPIDB is the implementation of the storage interface for
// OrganisationAPI.
type OrganisationAPIDB struct {
	Db *gorm.DB
}

// NewOrganisationAPIDB creates a new storage type.
func NewOrganisationAPIDB(db *gorm.DB) *OrganisationAPIDB {
	return &OrganisationAPIDB{Db: db}
}

// DB returns the underlying database.
func (m *OrganisationAPIDB) DB() interface{} {
	return m.Db
}

// OrganisationAPIStorage represents the storage interface.
type OrganisationAPIStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*OrganisationAPI, error)
	Get(ctx context.Context, id uuid.UUID) (*OrganisationAPI, error)
	Add(ctx context.Context, organisationapi *OrganisationAPI) error
	Update(ctx context.Context, organisationapi *OrganisationAPI) error
	Delete(ctx context.Context, id uuid.UUID) error

	ListOrganisationapi(ctx context.Context, organisationID int) []*app.Organisationapi
	OneOrganisationapi(ctx context.Context, id uuid.UUID, organisationID int) (*app.Organisationapi, error)
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *OrganisationAPIDB) TableName() string {
	return "organisation_a_p_i_s"

}

// Belongs To Relationships

// OrganisationAPIFilterByOrganisation is a gorm filter for a Belongs To relationship.
func OrganisationAPIFilterByOrganisation(organisationID uuid.UUID, originaldb *gorm.DB) func(db *gorm.DB) *gorm.DB {

	if organisationID != uuid.Nil {

		return func(db *gorm.DB) *gorm.DB {
			return db.Where("organisation_id = ?", organisationID)
		}
	}
	return func(db *gorm.DB) *gorm.DB { return db }
}

// CRUD Functions

// Get returns a single OrganisationAPI as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *OrganisationAPIDB) Get(ctx context.Context, id uuid.UUID) (*OrganisationAPI, error) {
	defer goa.MeasureSince([]string{"goa", "db", "organisationAPI", "get"}, time.Now())

	var native OrganisationAPI
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of OrganisationAPI
func (m *OrganisationAPIDB) List(ctx context.Context) ([]*OrganisationAPI, error) {
	defer goa.MeasureSince([]string{"goa", "db", "organisationAPI", "list"}, time.Now())

	var objs []*OrganisationAPI
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *OrganisationAPIDB) Add(ctx context.Context, model *OrganisationAPI) error {
	defer goa.MeasureSince([]string{"goa", "db", "organisationAPI", "add"}, time.Now())

	model.ID = uuid.Must(uuid.NewV4())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding OrganisationAPI", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *OrganisationAPIDB) Update(ctx context.Context, model *OrganisationAPI) error {
	defer goa.MeasureSince([]string{"goa", "db", "organisationAPI", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating OrganisationAPI", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *OrganisationAPIDB) Delete(ctx context.Context, id uuid.UUID) error {
	defer goa.MeasureSince([]string{"goa", "db", "organisationAPI", "delete"}, time.Now())

	err := m.Db.Where("id = ?", id).Delete(&OrganisationAPI{}).Error
	if err != nil {
		goa.LogError(ctx, "error deleting OrganisationAPI", "error", err.Error())
		return err
	}

	return nil
}
