// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "MijnApp": Models
//
// Command:
// $ goagen
// --design=github.com/mijn-app/mijn-app-backend/design
// --out=$(GOPATH)/src/github.com/mijn-app/mijn-app-backend
// --version=v1.4.1

package models

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
	"time"
)

// State token for OAuth
type OAuthState struct {
	ID         uuid.UUID `sql:"type:uuid;default:uuid_generate_v4()" gorm:"primary_key"` // primary key
	CreatedAt  time.Time
	DeletedAt  *time.Time
	Token      string `sql:"index"`
	UpdatedAt  time.Time
	Expiration time.Time // timestamp
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m OAuthState) TableName() string {
	return "o_auth_states"

}

// OAuthStateDB is the implementation of the storage interface for
// OAuthState.
type OAuthStateDB struct {
	Db *gorm.DB
}

// NewOAuthStateDB creates a new storage type.
func NewOAuthStateDB(db *gorm.DB) *OAuthStateDB {
	return &OAuthStateDB{Db: db}
}

// DB returns the underlying database.
func (m *OAuthStateDB) DB() interface{} {
	return m.Db
}

// OAuthStateStorage represents the storage interface.
type OAuthStateStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*OAuthState, error)
	Get(ctx context.Context, id uuid.UUID) (*OAuthState, error)
	Add(ctx context.Context, oauthstate *OAuthState) error
	Update(ctx context.Context, oauthstate *OAuthState) error
	Delete(ctx context.Context, id uuid.UUID) error
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *OAuthStateDB) TableName() string {
	return "o_auth_states"

}

// CRUD Functions

// Get returns a single OAuthState as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *OAuthStateDB) Get(ctx context.Context, id uuid.UUID) (*OAuthState, error) {
	defer goa.MeasureSince([]string{"goa", "db", "oAuthState", "get"}, time.Now())

	var native OAuthState
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of OAuthState
func (m *OAuthStateDB) List(ctx context.Context) ([]*OAuthState, error) {
	defer goa.MeasureSince([]string{"goa", "db", "oAuthState", "list"}, time.Now())

	var objs []*OAuthState
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *OAuthStateDB) Add(ctx context.Context, model *OAuthState) error {
	defer goa.MeasureSince([]string{"goa", "db", "oAuthState", "add"}, time.Now())

	model.ID = uuid.Must(uuid.NewV4())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding OAuthState", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *OAuthStateDB) Update(ctx context.Context, model *OAuthState) error {
	defer goa.MeasureSince([]string{"goa", "db", "oAuthState", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating OAuthState", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *OAuthStateDB) Delete(ctx context.Context, id uuid.UUID) error {
	defer goa.MeasureSince([]string{"goa", "db", "oAuthState", "delete"}, time.Now())

	err := m.Db.Where("id = ?", id).Delete(&OAuthState{}).Error
	if err != nil {
		goa.LogError(ctx, "error deleting OAuthState", "error", err.Error())
		return err
	}

	return nil
}
