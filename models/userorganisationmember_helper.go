// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "MijnApp": Model Helpers
//
// Command:
// $ goagen
// --design=github.com/mijn-app/mijn-app-backend/design
// --out=$(GOPATH)/src/github.com/mijn-app/mijn-app-backend
// --version=v1.4.1

package models

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
	"github.com/mijn-app/mijn-app-backend/app"
	"time"
)

// MediaType Retrieval Functions

// ListUserorganisationmember returns an array of view: default.
func (m *UserOrganisationMemberDB) ListUserorganisationmember(ctx context.Context, organisationID uuid.UUID, userID uuid.UUID) []*app.Userorganisationmember {
	defer goa.MeasureSince([]string{"goa", "db", "userorganisationmember", "listuserorganisationmember"}, time.Now())

	var native []*UserOrganisationMember
	var objs []*app.Userorganisationmember
	err := m.Db.Scopes(UserOrganisationMemberFilterByOrganisation(organisationID, m.Db), UserOrganisationMemberFilterByUser(userID, m.Db)).Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing UserOrganisationMember", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.UserOrganisationMemberToUserorganisationmember())
	}

	return objs
}

// UserOrganisationMemberToUserorganisationmember loads a UserOrganisationMember and builds the default view of media type Userorganisationmember.
func (m *UserOrganisationMember) UserOrganisationMemberToUserorganisationmember() *app.Userorganisationmember {
	userorganisationmember := &app.Userorganisationmember{}
	userorganisationmember.ID = &m.ID
	tmp1 := int(m.Role)
	userorganisationmember.Role = &tmp1

	return userorganisationmember
}

// OneUserorganisationmember loads a UserOrganisationMember and builds the default view of media type Userorganisationmember.
func (m *UserOrganisationMemberDB) OneUserorganisationmember(ctx context.Context, id uuid.UUID, organisationID uuid.UUID, userID uuid.UUID) (*app.Userorganisationmember, error) {
	defer goa.MeasureSince([]string{"goa", "db", "userorganisationmember", "oneuserorganisationmember"}, time.Now())

	var native UserOrganisationMember
	err := m.Db.Scopes(UserOrganisationMemberFilterByOrganisation(organisationID, m.Db), UserOrganisationMemberFilterByUser(userID, m.Db)).Table(m.TableName()).Preload("Organisation").Preload("User").Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting UserOrganisationMember", "error", err.Error())
		return nil, err
	}

	view := *native.UserOrganisationMemberToUserorganisationmember()
	return &view, err
}
