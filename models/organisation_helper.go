// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "MijnApp": Model Helpers
//
// Command:
// $ goagen
// --design=github.com/mijn-app/mijn-app-backend/design
// --out=$(GOPATH)/src/github.com/mijn-app/mijn-app-backend
// --version=v1.4.1

package models

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
	"github.com/mijn-app/mijn-app-backend/app"
	"time"
)

// MediaType Retrieval Functions

// ListOrganisation returns an array of view: default.
func (m *OrganisationDB) ListOrganisation(ctx context.Context) []*app.Organisation {
	defer goa.MeasureSince([]string{"goa", "db", "organisation", "listorganisation"}, time.Now())

	var native []*Organisation
	var objs []*app.Organisation
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing Organisation", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.OrganisationToOrganisation())
	}

	return objs
}

// OrganisationToOrganisation loads a Organisation and builds the default view of media type Organisation.
func (m *Organisation) OrganisationToOrganisation() *app.Organisation {
	organisation := &app.Organisation{}
	organisation.ID = &m.ID
	organisation.Name = &m.Name

	return organisation
}

// OneOrganisation loads a Organisation and builds the default view of media type Organisation.
func (m *OrganisationDB) OneOrganisation(ctx context.Context, id uuid.UUID) (*app.Organisation, error) {
	defer goa.MeasureSince([]string{"goa", "db", "organisation", "oneorganisation"}, time.Now())

	var native Organisation
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting Organisation", "error", err.Error())
		return nil, err
	}

	view := *native.OrganisationToOrganisation()
	return &view, err
}
