// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "MijnApp": Model Helpers
//
// Command:
// $ goagen
// --design=github.com/mijn-app/mijn-app-backend/design
// --out=$(GOPATH)/src/github.com/mijn-app/mijn-app-backend
// --version=v1.4.1

package models

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
	"github.com/mijn-app/mijn-app-backend/app"
	"time"
)

// MediaType Retrieval Functions

// ListOrganisationapi returns an array of view: default.
func (m *OrganisationAPIDB) ListOrganisationapi(ctx context.Context, organisationID uuid.UUID) []*app.Organisationapi {
	defer goa.MeasureSince([]string{"goa", "db", "organisationapi", "listorganisationapi"}, time.Now())

	var native []*OrganisationAPI
	var objs []*app.Organisationapi
	err := m.Db.Scopes(OrganisationAPIFilterByOrganisation(organisationID, m.Db)).Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing OrganisationAPI", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.OrganisationAPIToOrganisationapi())
	}

	return objs
}

// OrganisationAPIToOrganisationapi loads a OrganisationAPI and builds the default view of media type Organisationapi.
func (m *OrganisationAPI) OrganisationAPIToOrganisationapi() *app.Organisationapi {
	organisationapi := &app.Organisationapi{}
	organisationapi.ID = &m.ID
	organisationapi.Name = &m.Name
	tmp1 := int(m.Type)
	organisationapi.Type = &tmp1
	organisationapi.URL = &m.URL

	return organisationapi
}

// OneOrganisationapi loads a OrganisationAPI and builds the default view of media type Organisationapi.
func (m *OrganisationAPIDB) OneOrganisationapi(ctx context.Context, id uuid.UUID, organisationID uuid.UUID) (*app.Organisationapi, error) {
	defer goa.MeasureSince([]string{"goa", "db", "organisationapi", "oneorganisationapi"}, time.Now())

	var native OrganisationAPI
	err := m.Db.Scopes(OrganisationAPIFilterByOrganisation(organisationID, m.Db)).Table(m.TableName()).Preload("Organisation").Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting OrganisationAPI", "error", err.Error())
		return nil, err
	}

	view := *native.OrganisationAPIToOrganisationapi()
	return &view, err
}
