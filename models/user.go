// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "MijnApp": Models
//
// Command:
// $ goagen
// --design=github.com/mijn-app/mijn-app-backend/design
// --out=$(GOPATH)/src/github.com/mijn-app/mijn-app-backend
// --version=v1.4.1

package models

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
	"github.com/mijn-app/mijn-app-backend/app"
	"time"
)

// User model
type User struct {
	ID                 uuid.UUID `sql:"type:uuid;default:uuid_generate_v4()" gorm:"primary_key"` // primary key
	Addres             Address   // has one Address
	CreatedAt          time.Time
	DeletedAt          *time.Time
	Email              string `sql:"unique"`
	FirstName          string
	Gender             UserGender `sql:"type:smallint"` // enum UserGender
	GovIdentifier      string
	ItsmeSubjectNumber string `sql:"unique"`
	LastName           string
	LastNamePrefix     string
	Password           string
	PhoneNumber        string
	Role               UserRoles `sql:"type:smallint"` // enum UserRoles
	UpdatedAt          time.Time
	DateOfBirth        time.Time // timestamp
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m User) TableName() string {
	return "users"

}

// UserDB is the implementation of the storage interface for
// User.
type UserDB struct {
	Db *gorm.DB
}

// NewUserDB creates a new storage type.
func NewUserDB(db *gorm.DB) *UserDB {
	return &UserDB{Db: db}
}

// DB returns the underlying database.
func (m *UserDB) DB() interface{} {
	return m.Db
}

// UserStorage represents the storage interface.
type UserStorage interface {
	DB() interface{}
	List(ctx context.Context) ([]*User, error)
	Get(ctx context.Context, id uuid.UUID) (*User, error)
	Add(ctx context.Context, user *User) error
	Update(ctx context.Context, user *User) error
	Delete(ctx context.Context, id uuid.UUID) error

	ListUserAuth(ctx context.Context) []*app.UserAuth
	OneUserAuth(ctx context.Context, id uuid.UUID) (*app.UserAuth, error)

	ListUserCompact(ctx context.Context) []*app.UserCompact
	OneUserCompact(ctx context.Context, id uuid.UUID) (*app.UserCompact, error)

	ListUser(ctx context.Context) []*app.User
	OneUser(ctx context.Context, id uuid.UUID) (*app.User, error)

	ListUserGov(ctx context.Context) []*app.UserGov
	OneUserGov(ctx context.Context, id uuid.UUID) (*app.UserGov, error)

	UpdateFromCreateUserPayload(ctx context.Context, payload *app.CreateUserPayload, id uuid.UUID) error

	UpdateFromUpdateUserPayload(ctx context.Context, payload *app.UpdateUserPayload, id uuid.UUID) error
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m *UserDB) TableName() string {
	return "users"

}

// CRUD Functions

// Get returns a single User as a Database Model
// This is more for use internally, and probably not what you want in  your controllers
func (m *UserDB) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	defer goa.MeasureSince([]string{"goa", "db", "user", "get"}, time.Now())

	var native User
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of User
func (m *UserDB) List(ctx context.Context) ([]*User, error) {
	defer goa.MeasureSince([]string{"goa", "db", "user", "list"}, time.Now())

	var objs []*User
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *UserDB) Add(ctx context.Context, model *User) error {
	defer goa.MeasureSince([]string{"goa", "db", "user", "add"}, time.Now())

	model.ID = uuid.Must(uuid.NewV4())

	err := m.Db.Create(model).Error
	if err != nil {
		goa.LogError(ctx, "error adding User", "error", err.Error())
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *UserDB) Update(ctx context.Context, model *User) error {
	defer goa.MeasureSince([]string{"goa", "db", "user", "update"}, time.Now())

	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		goa.LogError(ctx, "error updating User", "error", err.Error())
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *UserDB) Delete(ctx context.Context, id uuid.UUID) error {
	defer goa.MeasureSince([]string{"goa", "db", "user", "delete"}, time.Now())

	err := m.Db.Where("id = ?", id).Delete(&User{}).Error
	if err != nil {
		goa.LogError(ctx, "error deleting User", "error", err.Error())
		return err
	}

	return nil
}

// UserFromCreateUserPayload Converts source CreateUserPayload to target User model
// only copying the non-nil fields from the source.
func UserFromCreateUserPayload(payload *app.CreateUserPayload) *User {
	user := &User{}
	if payload.DateOfBirth != nil {
		user.DateOfBirth = *payload.DateOfBirth
	}
	user.Email = payload.Email
	user.FirstName = payload.FirstName
	if payload.Gender != nil {
		user.Gender.Scan(int64(*payload.Gender))
	}
	user.GovIdentifier = payload.GovIdentifier
	user.LastName = payload.LastName
	if payload.LastNamePrefix != nil {
		user.LastNamePrefix = *payload.LastNamePrefix
	}
	user.Password = payload.Password
	if payload.PhoneNumber != nil {
		user.PhoneNumber = *payload.PhoneNumber
	}

	return user
}

// UpdateFromCreateUserPayload applies non-nil changes from CreateUserPayload to the model and saves it
func (m *UserDB) UpdateFromCreateUserPayload(ctx context.Context, payload *app.CreateUserPayload, id uuid.UUID) error {
	defer goa.MeasureSince([]string{"goa", "db", "user", "updatefromcreateUserPayload"}, time.Now())

	var obj User
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&obj).Error
	if err != nil {
		goa.LogError(ctx, "error retrieving User", "error", err.Error())
		return err
	}
	if payload.DateOfBirth != nil {
		obj.DateOfBirth = *payload.DateOfBirth
	}
	obj.Email = payload.Email
	obj.FirstName = payload.FirstName
	if payload.Gender != nil {
		obj.Gender.Scan(int64(*payload.Gender))
	}
	obj.GovIdentifier = payload.GovIdentifier
	obj.LastName = payload.LastName
	if payload.LastNamePrefix != nil {
		obj.LastNamePrefix = *payload.LastNamePrefix
	}
	obj.Password = payload.Password
	if payload.PhoneNumber != nil {
		obj.PhoneNumber = *payload.PhoneNumber
	}

	err = m.Db.Save(&obj).Error
	return err
}

// UserFromUpdateUserPayload Converts source UpdateUserPayload to target User model
// only copying the non-nil fields from the source.
func UserFromUpdateUserPayload(payload *app.UpdateUserPayload) *User {
	user := &User{}
	if payload.DateOfBirth != nil {
		user.DateOfBirth = *payload.DateOfBirth
	}
	if payload.Email != nil {
		user.Email = *payload.Email
	}
	if payload.FirstName != nil {
		user.FirstName = *payload.FirstName
	}
	if payload.Gender != nil {
		user.Gender.Scan(int64(*payload.Gender))
	}
	if payload.GovIdentifier != nil {
		user.GovIdentifier = *payload.GovIdentifier
	}
	if payload.LastName != nil {
		user.LastName = *payload.LastName
	}
	if payload.LastNamePrefix != nil {
		user.LastNamePrefix = *payload.LastNamePrefix
	}
	if payload.Password != nil {
		user.Password = *payload.Password
	}
	if payload.PhoneNumber != nil {
		user.PhoneNumber = *payload.PhoneNumber
	}

	return user
}

// UpdateFromUpdateUserPayload applies non-nil changes from UpdateUserPayload to the model and saves it
func (m *UserDB) UpdateFromUpdateUserPayload(ctx context.Context, payload *app.UpdateUserPayload, id uuid.UUID) error {
	defer goa.MeasureSince([]string{"goa", "db", "user", "updatefromupdateUserPayload"}, time.Now())

	var obj User
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&obj).Error
	if err != nil {
		goa.LogError(ctx, "error retrieving User", "error", err.Error())
		return err
	}
	if payload.DateOfBirth != nil {
		obj.DateOfBirth = *payload.DateOfBirth
	}
	if payload.Email != nil {
		obj.Email = *payload.Email
	}
	if payload.FirstName != nil {
		obj.FirstName = *payload.FirstName
	}
	if payload.Gender != nil {
		obj.Gender.Scan(int64(*payload.Gender))
	}
	if payload.GovIdentifier != nil {
		obj.GovIdentifier = *payload.GovIdentifier
	}
	if payload.LastName != nil {
		obj.LastName = *payload.LastName
	}
	if payload.LastNamePrefix != nil {
		obj.LastNamePrefix = *payload.LastNamePrefix
	}
	if payload.Password != nil {
		obj.Password = *payload.Password
	}
	if payload.PhoneNumber != nil {
		obj.PhoneNumber = *payload.PhoneNumber
	}

	err = m.Db.Save(&obj).Error
	return err
}
