// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "MijnApp": Model Helpers
//
// Command:
// $ goagen
// --design=github.com/mijn-app/mijn-app-backend/design
// --out=$(GOPATH)/src/github.com/mijn-app/mijn-app-backend
// --version=v1.4.1

package models

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
	"github.com/mijn-app/mijn-app-backend/app"
	"time"
)

// MediaType Retrieval Functions

// ListUserAuth returns an array of view: auth.
func (m *UserDB) ListUserAuth(ctx context.Context) []*app.UserAuth {
	defer goa.MeasureSince([]string{"goa", "db", "user", "listuserauth"}, time.Now())

	var native []*User
	var objs []*app.UserAuth
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing User", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.UserToUserAuth())
	}

	return objs
}

// UserToUserAuth loads a User and builds the auth view of media type User.
func (m *User) UserToUserAuth() *app.UserAuth {
	user := &app.UserAuth{}
	user.Email = &m.Email
	user.ID = &m.ID
	tmp1 := int(m.Role)
	user.Role = &tmp1

	return user
}

// OneUserAuth loads a User and builds the auth view of media type User.
func (m *UserDB) OneUserAuth(ctx context.Context, id uuid.UUID) (*app.UserAuth, error) {
	defer goa.MeasureSince([]string{"goa", "db", "user", "oneuserauth"}, time.Now())

	var native User
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting User", "error", err.Error())
		return nil, err
	}

	view := *native.UserToUserAuth()
	return &view, err
}

// MediaType Retrieval Functions

// ListUserCompact returns an array of view: compact.
func (m *UserDB) ListUserCompact(ctx context.Context) []*app.UserCompact {
	defer goa.MeasureSince([]string{"goa", "db", "user", "listusercompact"}, time.Now())

	var native []*User
	var objs []*app.UserCompact
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing User", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.UserToUserCompact())
	}

	return objs
}

// UserToUserCompact loads a User and builds the compact view of media type User.
func (m *User) UserToUserCompact() *app.UserCompact {
	user := &app.UserCompact{}
	user.Email = &m.Email
	user.FirstName = &m.FirstName
	user.ID = &m.ID
	user.LastName = &m.LastName

	return user
}

// OneUserCompact loads a User and builds the compact view of media type User.
func (m *UserDB) OneUserCompact(ctx context.Context, id uuid.UUID) (*app.UserCompact, error) {
	defer goa.MeasureSince([]string{"goa", "db", "user", "oneusercompact"}, time.Now())

	var native User
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting User", "error", err.Error())
		return nil, err
	}

	view := *native.UserToUserCompact()
	return &view, err
}

// MediaType Retrieval Functions

// ListUser returns an array of view: default.
func (m *UserDB) ListUser(ctx context.Context) []*app.User {
	defer goa.MeasureSince([]string{"goa", "db", "user", "listuser"}, time.Now())

	var native []*User
	var objs []*app.User
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing User", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.UserToUser())
	}

	return objs
}

// UserToUser loads a User and builds the default view of media type User.
func (m *User) UserToUser() *app.User {
	user := &app.User{}
	user.DateOfBirth = &m.DateOfBirth
	user.Email = &m.Email
	user.FirstName = &m.FirstName
	tmp1 := int(m.Gender)
	user.Gender = &tmp1
	user.GovIdentifier = &m.GovIdentifier
	user.ID = &m.ID
	user.LastName = &m.LastName
	user.LastNamePrefix = &m.LastNamePrefix
	user.PhoneNumber = &m.PhoneNumber
	tmp2 := int(m.Role)
	user.Role = &tmp2

	return user
}

// OneUser loads a User and builds the default view of media type User.
func (m *UserDB) OneUser(ctx context.Context, id uuid.UUID) (*app.User, error) {
	defer goa.MeasureSince([]string{"goa", "db", "user", "oneuser"}, time.Now())

	var native User
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting User", "error", err.Error())
		return nil, err
	}

	view := *native.UserToUser()
	return &view, err
}

// MediaType Retrieval Functions

// ListUserGov returns an array of view: gov.
func (m *UserDB) ListUserGov(ctx context.Context) []*app.UserGov {
	defer goa.MeasureSince([]string{"goa", "db", "user", "listusergov"}, time.Now())

	var native []*User
	var objs []*app.UserGov
	err := m.Db.Scopes().Table(m.TableName()).Find(&native).Error

	if err != nil {
		goa.LogError(ctx, "error listing User", "error", err.Error())
		return objs
	}

	for _, t := range native {
		objs = append(objs, t.UserToUserGov())
	}

	return objs
}

// UserToUserGov loads a User and builds the gov view of media type User.
func (m *User) UserToUserGov() *app.UserGov {
	user := &app.UserGov{}
	user.GovIdentifier = &m.GovIdentifier

	return user
}

// OneUserGov loads a User and builds the gov view of media type User.
func (m *UserDB) OneUserGov(ctx context.Context, id uuid.UUID) (*app.UserGov, error) {
	defer goa.MeasureSince([]string{"goa", "db", "user", "oneusergov"}, time.Now())

	var native User
	err := m.Db.Scopes().Table(m.TableName()).Where("id = ?", id).Find(&native).Error

	if err != nil && err != gorm.ErrRecordNotFound {
		goa.LogError(ctx, "error getting User", "error", err.Error())
		return nil, err
	}

	view := *native.UserToUserGov()
	return &view, err
}
