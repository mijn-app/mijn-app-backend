// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "MijnApp": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/mijn-app/mijn-app-backend/design
// --out=$(GOPATH)/src/github.com/mijn-app/mijn-app-backend
// --version=v1.4.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"github.com/goadesign/goa/encoding/form"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(form.NewDecoder, "application/x-www-form-urlencoded")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// AddressController is the controller interface for the Address actions.
type AddressController interface {
	goa.Muxer
	Create(*CreateAddressContext) error
	Show(*ShowAddressContext) error
	Update(*UpdateAddressContext) error
}

// MountAddressController "mounts" a Address resource controller on the given service.
func MountAddressController(service *goa.Service, ctrl AddressController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/users/:userID/address", ctrl.MuxHandler("preflight", handleAddressOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateAddressContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateAddressPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleSecurity("jwt", h, "api:USER")
	h = handleAddressOrigin(h)
	service.Mux.Handle("POST", "/v1/users/:userID/address", ctrl.MuxHandler("create", h, unmarshalCreateAddressPayload))
	service.LogInfo("mount", "ctrl", "Address", "action", "Create", "route", "POST /v1/users/:userID/address", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowAddressContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("jwt", h, "api:USER")
	h = handleAddressOrigin(h)
	service.Mux.Handle("GET", "/v1/users/:userID/address", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Address", "action", "Show", "route", "GET /v1/users/:userID/address", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateAddressContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateAddressPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("jwt", h, "api:USER")
	h = handleAddressOrigin(h)
	service.Mux.Handle("PUT", "/v1/users/:userID/address", ctrl.MuxHandler("update", h, unmarshalUpdateAddressPayload))
	service.LogInfo("mount", "ctrl", "Address", "action", "Update", "route", "PUT /v1/users/:userID/address", "security", "jwt")
}

// handleAddressOrigin applies the CORS response headers corresponding to the origin.
func handleAddressOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE, OPTIONS")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, X-Auth, X-Pin, X-Platform, content-type, X-Vendor-id, x-list-limit, x-list-page, x-list-filter, X-List-Count")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateAddressPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateAddressPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createAddressPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateAddressPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateAddressPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateAddressPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// AvglogController is the controller interface for the Avglog actions.
type AvglogController interface {
	goa.Muxer
	List(*ListAvglogContext) error
	Show(*ShowAvglogContext) error
}

// MountAvglogController "mounts" a Avglog resource controller on the given service.
func MountAvglogController(service *goa.Service, ctrl AvglogController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/avglogs", ctrl.MuxHandler("preflight", handleAvglogOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/v1/avglogs/:avglogID", ctrl.MuxHandler("preflight", handleAvglogOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListAvglogContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:USER")
	h = handleAvglogOrigin(h)
	service.Mux.Handle("GET", "/v1/avglogs", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Avglog", "action", "List", "route", "GET /v1/avglogs", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowAvglogContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("jwt", h, "api:USER")
	h = handleAvglogOrigin(h)
	service.Mux.Handle("GET", "/v1/avglogs/:avglogID", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Avglog", "action", "Show", "route", "GET /v1/avglogs/:avglogID", "security", "jwt")
}

// handleAvglogOrigin applies the CORS response headers corresponding to the origin.
func handleAvglogOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE, OPTIONS")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, X-Auth, X-Pin, X-Platform, content-type, X-Vendor-id, x-list-limit, x-list-page, x-list-filter, X-List-Count")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// ContractController is the controller interface for the Contract actions.
type ContractController interface {
	goa.Muxer
	List(*ListContractContext) error
	Show(*ShowContractContext) error
}

// MountContractController "mounts" a Contract resource controller on the given service.
func MountContractController(service *goa.Service, ctrl ContractController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/contracts", ctrl.MuxHandler("preflight", handleContractOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/v1/contracts/:contractID", ctrl.MuxHandler("preflight", handleContractOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListContractContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:USER")
	h = handleContractOrigin(h)
	service.Mux.Handle("GET", "/v1/contracts", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Contract", "action", "List", "route", "GET /v1/contracts", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowContractContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("jwt", h, "api:USER")
	h = handleContractOrigin(h)
	service.Mux.Handle("GET", "/v1/contracts/:contractID", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Contract", "action", "Show", "route", "GET /v1/contracts/:contractID", "security", "jwt")
}

// handleContractOrigin applies the CORS response headers corresponding to the origin.
func handleContractOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE, OPTIONS")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, X-Auth, X-Pin, X-Platform, content-type, X-Vendor-id, x-list-limit, x-list-page, x-list-filter, X-List-Count")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// HealthController is the controller interface for the Health actions.
type HealthController interface {
	goa.Muxer
	Health(*HealthHealthContext) error
}

// MountHealthController "mounts" a Health resource controller on the given service.
func MountHealthController(service *goa.Service, ctrl HealthController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/health", ctrl.MuxHandler("preflight", handleHealthOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewHealthHealthContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Health(rctx)
	}
	h = handleHealthOrigin(h)
	service.Mux.Handle("GET", "/v1/health", ctrl.MuxHandler("health", h, nil))
	service.LogInfo("mount", "ctrl", "Health", "action", "Health", "route", "GET /v1/health")
}

// handleHealthOrigin applies the CORS response headers corresponding to the origin.
func handleHealthOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE, OPTIONS")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, X-Auth, X-Pin, X-Platform, content-type, X-Vendor-id, x-list-limit, x-list-page, x-list-filter, X-List-Count")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// JWTController is the controller interface for the JWT actions.
type JWTController interface {
	goa.Muxer
	Refresh(*RefreshJWTContext) error
	Signin(*SigninJWTContext) error
}

// MountJWTController "mounts" a JWT resource controller on the given service.
func MountJWTController(service *goa.Service, ctrl JWTController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/jwt/refresh", ctrl.MuxHandler("preflight", handleJWTOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/v1/jwt/signin", ctrl.MuxHandler("preflight", handleJWTOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewRefreshJWTContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Refresh(rctx)
	}
	h = handleSecurity("jwt", h, "api:access")
	h = handleJWTOrigin(h)
	service.Mux.Handle("GET", "/v1/jwt/refresh", ctrl.MuxHandler("refresh", h, nil))
	service.LogInfo("mount", "ctrl", "JWT", "action", "Refresh", "route", "GET /v1/jwt/refresh", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSigninJWTContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Signin(rctx)
	}
	h = handleSecurity("SigninBasicAuth", h)
	h = handleJWTOrigin(h)
	service.Mux.Handle("POST", "/v1/jwt/signin", ctrl.MuxHandler("signin", h, nil))
	service.LogInfo("mount", "ctrl", "JWT", "action", "Signin", "route", "POST /v1/jwt/signin", "security", "SigninBasicAuth")
}

// handleJWTOrigin applies the CORS response headers corresponding to the origin.
func handleJWTOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE, OPTIONS")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, X-Auth, X-Pin, X-Platform, content-type, X-Vendor-id, x-list-limit, x-list-page, x-list-filter, X-List-Count")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// MailController is the controller interface for the Mail actions.
type MailController interface {
	goa.Muxer
	Send(*SendMailContext) error
}

// MountMailController "mounts" a Mail resource controller on the given service.
func MountMailController(service *goa.Service, ctrl MailController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/mail", ctrl.MuxHandler("preflight", handleMailOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewSendMailContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*SendMailPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Send(rctx)
	}
	h = handleMailOrigin(h)
	service.Mux.Handle("POST", "/v1/mail", ctrl.MuxHandler("send", h, unmarshalSendMailPayload))
	service.LogInfo("mount", "ctrl", "Mail", "action", "Send", "route", "POST /v1/mail")
}

// handleMailOrigin applies the CORS response headers corresponding to the origin.
func handleMailOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE, OPTIONS")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, X-Auth, X-Pin, X-Platform, content-type, X-Vendor-id, x-list-limit, x-list-page, x-list-filter, X-List-Count")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalSendMailPayload unmarshals the request body into the context request data Payload field.
func unmarshalSendMailPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &sendMailPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// OauthController is the controller interface for the Oauth actions.
type OauthController interface {
	goa.Muxer
	Callback(*CallbackOauthContext) error
	Handle(*HandleOauthContext) error
	Init(*InitOauthContext) error
}

// MountOauthController "mounts" a Oauth resource controller on the given service.
func MountOauthController(service *goa.Service, ctrl OauthController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/oauth/callback", ctrl.MuxHandler("preflight", handleOauthOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/v1/oauth/handle/:provider", ctrl.MuxHandler("preflight", handleOauthOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/v1/oauth/init/:provider", ctrl.MuxHandler("preflight", handleOauthOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCallbackOauthContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Callback(rctx)
	}
	h = handleOauthOrigin(h)
	service.Mux.Handle("GET", "/v1/oauth/callback", ctrl.MuxHandler("callback", h, nil))
	service.LogInfo("mount", "ctrl", "Oauth", "action", "Callback", "route", "GET /v1/oauth/callback")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewHandleOauthContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Handle(rctx)
	}
	h = handleOauthOrigin(h)
	service.Mux.Handle("GET", "/v1/oauth/handle/:provider", ctrl.MuxHandler("handle", h, nil))
	service.LogInfo("mount", "ctrl", "Oauth", "action", "Handle", "route", "GET /v1/oauth/handle/:provider")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewInitOauthContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Init(rctx)
	}
	h = handleOauthOrigin(h)
	service.Mux.Handle("GET", "/v1/oauth/init/:provider", ctrl.MuxHandler("init", h, nil))
	service.LogInfo("mount", "ctrl", "Oauth", "action", "Init", "route", "GET /v1/oauth/init/:provider")
}

// handleOauthOrigin applies the CORS response headers corresponding to the origin.
func handleOauthOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE, OPTIONS")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, X-Auth, X-Pin, X-Platform, content-type, X-Vendor-id, x-list-limit, x-list-page, x-list-filter, X-List-Count")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// OrderController is the controller interface for the Order actions.
type OrderController interface {
	goa.Muxer
	Create(*CreateOrderContext) error
	List(*ListOrderContext) error
	Show(*ShowOrderContext) error
}

// MountOrderController "mounts" a Order resource controller on the given service.
func MountOrderController(service *goa.Service, ctrl OrderController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/order", ctrl.MuxHandler("preflight", handleOrderOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/v1/order/:orderID", ctrl.MuxHandler("preflight", handleOrderOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateOrderContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateOrderPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleOrderOrigin(h)
	service.Mux.Handle("POST", "/v1/order", ctrl.MuxHandler("create", h, unmarshalCreateOrderPayload))
	service.LogInfo("mount", "ctrl", "Order", "action", "Create", "route", "POST /v1/order")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListOrderContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleOrderOrigin(h)
	service.Mux.Handle("GET", "/v1/order", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "Order", "action", "List", "route", "GET /v1/order")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowOrderContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleOrderOrigin(h)
	service.Mux.Handle("GET", "/v1/order/:orderID", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "Order", "action", "Show", "route", "GET /v1/order/:orderID")
}

// handleOrderOrigin applies the CORS response headers corresponding to the origin.
func handleOrderOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE, OPTIONS")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, X-Auth, X-Pin, X-Platform, content-type, X-Vendor-id, x-list-limit, x-list-page, x-list-filter, X-List-Count")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateOrderPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateOrderPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createOrderPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// UserController is the controller interface for the User actions.
type UserController interface {
	goa.Muxer
	Create(*CreateUserContext) error
	List(*ListUserContext) error
	Show(*ShowUserContext) error
	Update(*UpdateUserContext) error
}

// MountUserController "mounts" a User resource controller on the given service.
func MountUserController(service *goa.Service, ctrl UserController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/v1/users", ctrl.MuxHandler("preflight", handleUserOrigin(cors.HandlePreflight()), nil))
	service.Mux.Handle("OPTIONS", "/v1/users/:userID", ctrl.MuxHandler("preflight", handleUserOrigin(cors.HandlePreflight()), nil))

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateUserPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	h = handleUserOrigin(h)
	service.Mux.Handle("POST", "/v1/users", ctrl.MuxHandler("create", h, unmarshalCreateUserPayload))
	service.LogInfo("mount", "ctrl", "User", "action", "Create", "route", "POST /v1/users")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewListUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.List(rctx)
	}
	h = handleSecurity("jwt", h, "api:USER")
	h = handleUserOrigin(h)
	service.Mux.Handle("GET", "/v1/users", ctrl.MuxHandler("list", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "List", "route", "GET /v1/users", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	h = handleSecurity("jwt", h, "api:USER")
	h = handleUserOrigin(h)
	service.Mux.Handle("GET", "/v1/users/:userID", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "User", "action", "Show", "route", "GET /v1/users/:userID", "security", "jwt")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewUpdateUserContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UpdateUserPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Update(rctx)
	}
	h = handleSecurity("jwt", h, "api:USER")
	h = handleUserOrigin(h)
	service.Mux.Handle("PUT", "/v1/users/:userID", ctrl.MuxHandler("update", h, unmarshalUpdateUserPayload))
	service.LogInfo("mount", "ctrl", "User", "action", "Update", "route", "PUT /v1/users/:userID", "security", "jwt")
}

// handleUserOrigin applies the CORS response headers corresponding to the origin.
func handleUserOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Max-Age", "600")
			rw.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE, OPTIONS")
				rw.Header().Set("Access-Control-Allow-Headers", "Authorization, X-Auth, X-Pin, X-Platform, content-type, X-Vendor-id, x-list-limit, x-list-page, x-list-filter, X-List-Count")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// unmarshalCreateUserPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateUserPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createUserPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// unmarshalUpdateUserPayload unmarshals the request body into the context request data Payload field.
func unmarshalUpdateUserPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &updateUserPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
