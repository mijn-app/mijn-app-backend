// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "MijnApp": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/mijn-app/mijn-app-backend/design
// --out=$(GOPATH)/src/github.com/mijn-app/mijn-app-backend
// --version=v1.4.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/gofrs/uuid"
	"net/http"
	"strconv"
)

// CreateAddressContext provides the address create action context.
type CreateAddressContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  uuid.UUID
	Payload *CreateAddressPayload
}

// NewCreateAddressContext parses the incoming request URL and body, performs validations and creates the
// context used by the address controller create action.
func NewCreateAddressContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateAddressContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateAddressContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := uuid.FromString(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "uuid"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *CreateAddressContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateAddressContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateAddressContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CreateAddressContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateAddressContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowAddressContext provides the address show action context.
type ShowAddressContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID uuid.UUID
}

// NewShowAddressContext parses the incoming request URL and body, performs validations and creates the
// context used by the address controller show action.
func NewShowAddressContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowAddressContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowAddressContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := uuid.FromString(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowAddressContext) OK(r *Address) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.address+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowAddressContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowAddressContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowAddressContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// UpdateAddressContext provides the address update action context.
type UpdateAddressContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  uuid.UUID
	Payload *UpdateAddressPayload
}

// NewUpdateAddressContext parses the incoming request URL and body, performs validations and creates the
// context used by the address controller update action.
func NewUpdateAddressContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateAddressContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateAddressContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := uuid.FromString(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "uuid"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *UpdateAddressContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateAddressContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateAddressContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateAddressContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ListAvglogContext provides the avglog list action context.
type ListAvglogContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListAvglogContext parses the incoming request URL and body, performs validations and creates the
// context used by the avglog controller list action.
func NewListAvglogContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListAvglogContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListAvglogContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListAvglogContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListAvglogContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListAvglogContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// ShowAvglogContext provides the avglog show action context.
type ShowAvglogContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AvglogID string
}

// NewShowAvglogContext parses the incoming request URL and body, performs validations and creates the
// context used by the avglog controller show action.
func NewShowAvglogContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowAvglogContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowAvglogContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAvglogID := req.Params["avglogID"]
	if len(paramAvglogID) > 0 {
		rawAvglogID := paramAvglogID[0]
		rctx.AvglogID = rawAvglogID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowAvglogContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowAvglogContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowAvglogContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// ListContractContext provides the contract list action context.
type ListContractContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListContractContext parses the incoming request URL and body, performs validations and creates the
// context used by the contract controller list action.
func NewListContractContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListContractContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListContractContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListContractContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListContractContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListContractContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// ShowContractContext provides the contract show action context.
type ShowContractContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ContractID string
}

// NewShowContractContext parses the incoming request URL and body, performs validations and creates the
// context used by the contract controller show action.
func NewShowContractContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowContractContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowContractContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramContractID := req.Params["contractID"]
	if len(paramContractID) > 0 {
		rawContractID := paramContractID[0]
		rctx.ContractID = rawContractID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowContractContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowContractContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowContractContext) NotFound(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// HealthHealthContext provides the health health action context.
type HealthHealthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewHealthHealthContext parses the incoming request URL and body, performs validations and creates the
// context used by the health controller health action.
func NewHealthHealthContext(ctx context.Context, r *http.Request, service *goa.Service) (*HealthHealthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HealthHealthContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HealthHealthContext) OK(r *Health) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.health+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *HealthHealthContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// RefreshJWTContext provides the jwt refresh action context.
type RefreshJWTContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewRefreshJWTContext parses the incoming request URL and body, performs validations and creates the
// context used by the jwt controller refresh action.
func NewRefreshJWTContext(ctx context.Context, r *http.Request, service *goa.Service) (*RefreshJWTContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RefreshJWTContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RefreshJWTContext) OK(r *Appstate) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.appstate+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// SigninJWTContext provides the jwt signin action context.
type SigninJWTContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewSigninJWTContext parses the incoming request URL and body, performs validations and creates the
// context used by the jwt controller signin action.
func NewSigninJWTContext(ctx context.Context, r *http.Request, service *goa.Service) (*SigninJWTContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SigninJWTContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SigninJWTContext) OK(r *Appstate) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.appstate+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SigninJWTContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// SendMailContext provides the mail send action context.
type SendMailContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *SendMailPayload
}

// NewSendMailContext parses the incoming request URL and body, performs validations and creates the
// context used by the mail controller send action.
func NewSendMailContext(ctx context.Context, r *http.Request, service *goa.Service) (*SendMailContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SendMailContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// sendMailPayload is the mail send action payload.
type sendMailPayload struct {
	Email       *string `form:"email,omitempty" json:"email,omitempty" yaml:"email,omitempty" xml:"email,omitempty"`
	Message     *string `form:"message,omitempty" json:"message,omitempty" yaml:"message,omitempty" xml:"message,omitempty"`
	Org         *string `form:"org,omitempty" json:"org,omitempty" yaml:"org,omitempty" xml:"org,omitempty"`
	Phonenumber *string `form:"phonenumber,omitempty" json:"phonenumber,omitempty" yaml:"phonenumber,omitempty" xml:"phonenumber,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *sendMailPayload) Validate() (err error) {
	if payload.Org == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "org"))
	}
	if payload.Email == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Phonenumber == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "phonenumber"))
	}
	if payload.Message == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "message"))
	}
	if payload.Email != nil {
		if ok := goa.ValidatePattern(`^[^@\s:]+@[^@\s]+\.[^@\s]+$`, *payload.Email); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.email`, *payload.Email, `^[^@\s:]+@[^@\s]+\.[^@\s]+$`))
		}
	}
	return
}

// Publicize creates SendMailPayload from sendMailPayload
func (payload *sendMailPayload) Publicize() *SendMailPayload {
	var pub SendMailPayload
	if payload.Email != nil {
		pub.Email = *payload.Email
	}
	if payload.Message != nil {
		pub.Message = *payload.Message
	}
	if payload.Org != nil {
		pub.Org = *payload.Org
	}
	if payload.Phonenumber != nil {
		pub.Phonenumber = *payload.Phonenumber
	}
	return &pub
}

// SendMailPayload is the mail send action payload.
type SendMailPayload struct {
	Email       string `form:"email" json:"email" yaml:"email" xml:"email"`
	Message     string `form:"message" json:"message" yaml:"message" xml:"message"`
	Org         string `form:"org" json:"org" yaml:"org" xml:"org"`
	Phonenumber string `form:"phonenumber" json:"phonenumber" yaml:"phonenumber" xml:"phonenumber"`
}

// Validate runs the validation rules defined in the design.
func (payload *SendMailPayload) Validate() (err error) {
	if payload.Org == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "org"))
	}
	if payload.Email == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "email"))
	}
	if payload.Phonenumber == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "phonenumber"))
	}
	if payload.Message == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "message"))
	}
	if ok := goa.ValidatePattern(`^[^@\s:]+@[^@\s]+\.[^@\s]+$`, payload.Email); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`raw.email`, payload.Email, `^[^@\s:]+@[^@\s]+\.[^@\s]+$`))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *SendMailContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SendMailContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// CallbackOauthContext provides the oauth callback action context.
type CallbackOauthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Code      *string
	Error     *string
	ErrorCode *string
	State     string
}

// NewCallbackOauthContext parses the incoming request URL and body, performs validations and creates the
// context used by the oauth controller callback action.
func NewCallbackOauthContext(ctx context.Context, r *http.Request, service *goa.Service) (*CallbackOauthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CallbackOauthContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCode := req.Params["code"]
	if len(paramCode) > 0 {
		rawCode := paramCode[0]
		rctx.Code = &rawCode
	}
	paramError := req.Params["error"]
	if len(paramError) > 0 {
		rawError := paramError[0]
		rctx.Error = &rawError
	}
	paramErrorCode := req.Params["error_code"]
	if len(paramErrorCode) > 0 {
		rawErrorCode := paramErrorCode[0]
		rctx.ErrorCode = &rawErrorCode
	}
	paramState := req.Params["state"]
	if len(paramState) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("state"))
	} else {
		rawState := paramState[0]
		rctx.State = rawState
	}
	return &rctx, err
}

// Found sends a HTTP response with status code 302.
func (ctx *CallbackOauthContext) Found() error {
	ctx.ResponseData.WriteHeader(302)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CallbackOauthContext) BadRequest(r string) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// HandleOauthContext provides the oauth handle action context.
type HandleOauthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Code       string
	Provider   string
	StateToken string
}

// NewHandleOauthContext parses the incoming request URL and body, performs validations and creates the
// context used by the oauth controller handle action.
func NewHandleOauthContext(ctx context.Context, r *http.Request, service *goa.Service) (*HandleOauthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := HandleOauthContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCode := req.Params["code"]
	if len(paramCode) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("code"))
	} else {
		rawCode := paramCode[0]
		rctx.Code = rawCode
	}
	paramProvider := req.Params["provider"]
	if len(paramProvider) > 0 {
		rawProvider := paramProvider[0]
		rctx.Provider = rawProvider
	}
	paramStateToken := req.Params["state_token"]
	if len(paramStateToken) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("state_token"))
	} else {
		rawStateToken := paramStateToken[0]
		rctx.StateToken = rawStateToken
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *HandleOauthContext) OK(r *Appstate) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.appstate+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *HandleOauthContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *HandleOauthContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *HandleOauthContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// InitOauthContext provides the oauth init action context.
type InitOauthContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	App                  *bool
	AppName              string
	Provider             string
	RerequestPermissions *bool
}

// NewInitOauthContext parses the incoming request URL and body, performs validations and creates the
// context used by the oauth controller init action.
func NewInitOauthContext(ctx context.Context, r *http.Request, service *goa.Service) (*InitOauthContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := InitOauthContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramApp := req.Params["app"]
	if len(paramApp) > 0 {
		rawApp := paramApp[0]
		if app_, err2 := strconv.ParseBool(rawApp); err2 == nil {
			tmp4 := &app_
			rctx.App = tmp4
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("app", rawApp, "boolean"))
		}
	}
	paramAppName := req.Params["appName"]
	if len(paramAppName) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("appName"))
	} else {
		rawAppName := paramAppName[0]
		rctx.AppName = rawAppName
	}
	paramProvider := req.Params["provider"]
	if len(paramProvider) > 0 {
		rawProvider := paramProvider[0]
		rctx.Provider = rawProvider
	}
	paramRerequestPermissions := req.Params["rerequestPermissions"]
	if len(paramRerequestPermissions) > 0 {
		rawRerequestPermissions := paramRerequestPermissions[0]
		if rerequestPermissions, err2 := strconv.ParseBool(rawRerequestPermissions); err2 == nil {
			tmp5 := &rerequestPermissions
			rctx.RerequestPermissions = tmp5
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("rerequestPermissions", rawRerequestPermissions, "boolean"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *InitOauthContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *InitOauthContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *InitOauthContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// CreateOrderContext provides the order create action context.
type CreateOrderContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateOrderPayload
}

// NewCreateOrderContext parses the incoming request URL and body, performs validations and creates the
// context used by the order controller create action.
func NewCreateOrderContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateOrderContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateOrderContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createOrderPayload is the order create action payload.
type createOrderPayload struct {
	// The order data as a json blob
	Data *string `form:"data,omitempty" json:"data,omitempty" yaml:"data,omitempty" xml:"data,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createOrderPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	return
}

// Publicize creates CreateOrderPayload from createOrderPayload
func (payload *createOrderPayload) Publicize() *CreateOrderPayload {
	var pub CreateOrderPayload
	if payload.Data != nil {
		pub.Data = *payload.Data
	}
	return &pub
}

// CreateOrderPayload is the order create action payload.
type CreateOrderPayload struct {
	// The order data as a json blob
	Data string `form:"data" json:"data" yaml:"data" xml:"data"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateOrderPayload) Validate() (err error) {
	if payload.Data == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	return
}

// NoContent sends a HTTP response with status code 204.
func (ctx *CreateOrderContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateOrderContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateOrderContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ListOrderContext provides the order list action context.
type ListOrderContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListOrderContext parses the incoming request URL and body, performs validations and creates the
// context used by the order controller list action.
func NewListOrderContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListOrderContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListOrderContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListOrderContext) OK(r OrderCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.order+json; type=collection")
	}
	if r == nil {
		r = OrderCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKItem sends a HTTP response with status code 200.
func (ctx *ListOrderContext) OKItem(r OrderItemCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.order+json; type=collection")
	}
	if r == nil {
		r = OrderItemCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListOrderContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListOrderContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowOrderContext provides the order show action context.
type ShowOrderContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	OrderID uuid.UUID
}

// NewShowOrderContext parses the incoming request URL and body, performs validations and creates the
// context used by the order controller show action.
func NewShowOrderContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowOrderContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowOrderContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramOrderID := req.Params["orderID"]
	if len(paramOrderID) > 0 {
		rawOrderID := paramOrderID[0]
		if orderID, err2 := uuid.FromString(rawOrderID); err2 == nil {
			rctx.OrderID = orderID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("orderID", rawOrderID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowOrderContext) OK(r *Order) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.order+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKItem sends a HTTP response with status code 200.
func (ctx *ShowOrderContext) OKItem(r *OrderItem) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.order+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowOrderContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowOrderContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowOrderContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowOrderContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// CreateUserContext provides the user create action context.
type CreateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateUserPayload
}

// NewCreateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller create action.
func NewCreateUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OKAuth sends a HTTP response with status code 200.
func (ctx *CreateUserContext) OKAuth(r *UserAuth) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKCompact sends a HTTP response with status code 200.
func (ctx *CreateUserContext) OKCompact(r *UserCompact) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateUserContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKGov sends a HTTP response with status code 200.
func (ctx *CreateUserContext) OKGov(r *UserGov) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateUserContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CreateUserContext) Conflict(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ListUserContext provides the user list action context.
type ListUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller list action.
func NewListUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OKAuth sends a HTTP response with status code 200.
func (ctx *ListUserContext) OKAuth(r UserAuthCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	}
	if r == nil {
		r = UserAuthCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKCompact sends a HTTP response with status code 200.
func (ctx *ListUserContext) OKCompact(r UserCompactCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	}
	if r == nil {
		r = UserCompactCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OK sends a HTTP response with status code 200.
func (ctx *ListUserContext) OK(r UserCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	}
	if r == nil {
		r = UserCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKGov sends a HTTP response with status code 200.
func (ctx *ListUserContext) OKGov(r UserGovCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json; type=collection")
	}
	if r == nil {
		r = UserGovCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListUserContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ListUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// ShowUserContext provides the user show action context.
type ShowUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID uuid.UUID
}

// NewShowUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller show action.
func NewShowUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := uuid.FromString(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "uuid"))
		}
	}
	return &rctx, err
}

// OKAuth sends a HTTP response with status code 200.
func (ctx *ShowUserContext) OKAuth(r *UserAuth) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKCompact sends a HTTP response with status code 200.
func (ctx *ShowUserContext) OKCompact(r *UserCompact) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowUserContext) OK(r *User) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKGov sends a HTTP response with status code 200.
func (ctx *ShowUserContext) OKGov(r *UserGov) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowUserContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// UpdateUserContext provides the user update action context.
type UpdateUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UserID  uuid.UUID
	Payload *UpdateUserPayload
}

// NewUpdateUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller update action.
func NewUpdateUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUserID := req.Params["userID"]
	if len(paramUserID) > 0 {
		rawUserID := paramUserID[0]
		if userID, err2 := uuid.FromString(rawUserID); err2 == nil {
			rctx.UserID = userID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("userID", rawUserID, "uuid"))
		}
	}
	return &rctx, err
}

// OKCompact sends a HTTP response with status code 200.
func (ctx *UpdateUserContext) OKCompact(r *UserCompact) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.user+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateUserContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateUserContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateUserContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateUserContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}
