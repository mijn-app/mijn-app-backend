// Code generated by goagen v1.4.1, DO NOT EDIT.
//
// API "MijnApp": oauth TestHelpers
//
// Command:
// $ goagen
// --design=github.com/mijn-app/mijn-app-backend/design
// --out=$(GOPATH)/src/github.com/mijn-app/mijn-app-backend
// --version=v1.4.1

package test

import (
	"bytes"
	"context"
	"fmt"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/goatest"
	"io"
	"github.com/mijn-app/mijn-app-backend/app"
	"log"
	"net/http"
	"net/http/httptest"
	"net/url"
)

// CallbackOauthBadRequest runs the method Callback of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func CallbackOauthBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.OauthController, code *string, error *string, errorCode *string, state string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if code != nil {
		sliceVal := []string{*code}
		query["code"] = sliceVal
	}
	if error != nil {
		sliceVal := []string{*error}
		query["error"] = sliceVal
	}
	if errorCode != nil {
		sliceVal := []string{*errorCode}
		query["error_code"] = sliceVal
	}
	{
		sliceVal := []string{state}
		query["state"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/v1/oauth/callback"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if code != nil {
		sliceVal := []string{*code}
		prms["code"] = sliceVal
	}
	if error != nil {
		sliceVal := []string{*error}
		prms["error"] = sliceVal
	}
	if errorCode != nil {
		sliceVal := []string{*errorCode}
		prms["error_code"] = sliceVal
	}
	{
		sliceVal := []string{state}
		prms["state"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "OauthTest"), rw, req, prms)
	callbackCtx, _err := app.NewCallbackOauthContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.Callback(callbackCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}

	// Return results
	return rw
}

// CallbackOauthFound runs the method Callback of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func CallbackOauthFound(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.OauthController, code *string, error *string, errorCode *string, state string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if code != nil {
		sliceVal := []string{*code}
		query["code"] = sliceVal
	}
	if error != nil {
		sliceVal := []string{*error}
		query["error"] = sliceVal
	}
	if errorCode != nil {
		sliceVal := []string{*errorCode}
		query["error_code"] = sliceVal
	}
	{
		sliceVal := []string{state}
		query["state"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/v1/oauth/callback"),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	if code != nil {
		sliceVal := []string{*code}
		prms["code"] = sliceVal
	}
	if error != nil {
		sliceVal := []string{*error}
		prms["error"] = sliceVal
	}
	if errorCode != nil {
		sliceVal := []string{*errorCode}
		prms["error_code"] = sliceVal
	}
	{
		sliceVal := []string{state}
		prms["state"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "OauthTest"), rw, req, prms)
	callbackCtx, _err := app.NewCallbackOauthContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.Callback(callbackCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 302 {
		t.Errorf("invalid response status code: got %+v, expected 302", rw.Code)
	}

	// Return results
	return rw
}

// HandleOauthBadRequest runs the method Handle of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func HandleOauthBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.OauthController, provider string, code string, stateToken string) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := []string{code}
		query["code"] = sliceVal
	}
	{
		sliceVal := []string{stateToken}
		query["state_token"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/v1/oauth/handle/%v", provider),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["provider"] = []string{fmt.Sprintf("%v", provider)}
	{
		sliceVal := []string{code}
		prms["code"] = sliceVal
	}
	{
		sliceVal := []string{stateToken}
		prms["state_token"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "OauthTest"), rw, req, prms)
	handleCtx, _err := app.NewHandleOauthContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		return nil, e
	}

	// Perform action
	_err = ctrl.Handle(handleCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(error)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// HandleOauthInternalServerError runs the method Handle of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func HandleOauthInternalServerError(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.OauthController, provider string, code string, stateToken string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := []string{code}
		query["code"] = sliceVal
	}
	{
		sliceVal := []string{stateToken}
		query["state_token"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/v1/oauth/handle/%v", provider),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["provider"] = []string{fmt.Sprintf("%v", provider)}
	{
		sliceVal := []string{code}
		prms["code"] = sliceVal
	}
	{
		sliceVal := []string{stateToken}
		prms["state_token"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "OauthTest"), rw, req, prms)
	handleCtx, _err := app.NewHandleOauthContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.Handle(handleCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 500 {
		t.Errorf("invalid response status code: got %+v, expected 500", rw.Code)
	}

	// Return results
	return rw
}

// HandleOauthOK runs the method Handle of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func HandleOauthOK(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.OauthController, provider string, code string, stateToken string) (http.ResponseWriter, *app.Appstate) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := []string{code}
		query["code"] = sliceVal
	}
	{
		sliceVal := []string{stateToken}
		query["state_token"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/v1/oauth/handle/%v", provider),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["provider"] = []string{fmt.Sprintf("%v", provider)}
	{
		sliceVal := []string{code}
		prms["code"] = sliceVal
	}
	{
		sliceVal := []string{stateToken}
		prms["state_token"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "OauthTest"), rw, req, prms)
	handleCtx, _err := app.NewHandleOauthContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil, nil
	}

	// Perform action
	_err = ctrl.Handle(handleCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 200 {
		t.Errorf("invalid response status code: got %+v, expected 200", rw.Code)
	}
	var mt *app.Appstate
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(*app.Appstate)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of app.Appstate", resp, resp)
		}
		_err = mt.Validate()
		if _err != nil {
			t.Errorf("invalid response media type: %s", _err)
		}
	}

	// Return results
	return rw, mt
}

// HandleOauthUnauthorized runs the method Handle of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func HandleOauthUnauthorized(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.OauthController, provider string, code string, stateToken string) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	{
		sliceVal := []string{code}
		query["code"] = sliceVal
	}
	{
		sliceVal := []string{stateToken}
		query["state_token"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/v1/oauth/handle/%v", provider),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["provider"] = []string{fmt.Sprintf("%v", provider)}
	{
		sliceVal := []string{code}
		prms["code"] = sliceVal
	}
	{
		sliceVal := []string{stateToken}
		prms["state_token"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "OauthTest"), rw, req, prms)
	handleCtx, _err := app.NewHandleOauthContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.Handle(handleCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 401 {
		t.Errorf("invalid response status code: got %+v, expected 401", rw.Code)
	}

	// Return results
	return rw
}

// InitOauthBadRequest runs the method Init of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers and the media type struct written to the response.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func InitOauthBadRequest(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.OauthController, provider string, app_ *bool, appName string, rerequestPermissions *bool) (http.ResponseWriter, error) {
	// Setup service
	var (
		logBuf bytes.Buffer
		resp   interface{}

		respSetter goatest.ResponseSetterFunc = func(r interface{}) { resp = r }
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if app_ != nil {
		sliceVal := []string{fmt.Sprintf("%v", *app_)}
		query["app"] = sliceVal
	}
	{
		sliceVal := []string{appName}
		query["appName"] = sliceVal
	}
	if rerequestPermissions != nil {
		sliceVal := []string{fmt.Sprintf("%v", *rerequestPermissions)}
		query["rerequestPermissions"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/v1/oauth/init/%v", provider),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["provider"] = []string{fmt.Sprintf("%v", provider)}
	if app_ != nil {
		sliceVal := []string{fmt.Sprintf("%v", *app_)}
		prms["app"] = sliceVal
	}
	{
		sliceVal := []string{appName}
		prms["appName"] = sliceVal
	}
	if rerequestPermissions != nil {
		sliceVal := []string{fmt.Sprintf("%v", *rerequestPermissions)}
		prms["rerequestPermissions"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "OauthTest"), rw, req, prms)
	initCtx, _err := app.NewInitOauthContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		return nil, e
	}

	// Perform action
	_err = ctrl.Init(initCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 400 {
		t.Errorf("invalid response status code: got %+v, expected 400", rw.Code)
	}
	var mt error
	if resp != nil {
		var _ok bool
		mt, _ok = resp.(error)
		if !_ok {
			t.Fatalf("invalid response media: got variable of type %T, value %+v, expected instance of error", resp, resp)
		}
	}

	// Return results
	return rw, mt
}

// InitOauthInternalServerError runs the method Init of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func InitOauthInternalServerError(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.OauthController, provider string, app_ *bool, appName string, rerequestPermissions *bool) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if app_ != nil {
		sliceVal := []string{fmt.Sprintf("%v", *app_)}
		query["app"] = sliceVal
	}
	{
		sliceVal := []string{appName}
		query["appName"] = sliceVal
	}
	if rerequestPermissions != nil {
		sliceVal := []string{fmt.Sprintf("%v", *rerequestPermissions)}
		query["rerequestPermissions"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/v1/oauth/init/%v", provider),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["provider"] = []string{fmt.Sprintf("%v", provider)}
	if app_ != nil {
		sliceVal := []string{fmt.Sprintf("%v", *app_)}
		prms["app"] = sliceVal
	}
	{
		sliceVal := []string{appName}
		prms["appName"] = sliceVal
	}
	if rerequestPermissions != nil {
		sliceVal := []string{fmt.Sprintf("%v", *rerequestPermissions)}
		prms["rerequestPermissions"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "OauthTest"), rw, req, prms)
	initCtx, _err := app.NewInitOauthContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.Init(initCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 500 {
		t.Errorf("invalid response status code: got %+v, expected 500", rw.Code)
	}

	// Return results
	return rw
}

// InitOauthNoContent runs the method Init of the given controller with the given parameters.
// It returns the response writer so it's possible to inspect the response headers.
// If ctx is nil then context.Background() is used.
// If service is nil then a default service is created.
func InitOauthNoContent(t goatest.TInterface, ctx context.Context, service *goa.Service, ctrl app.OauthController, provider string, app_ *bool, appName string, rerequestPermissions *bool) http.ResponseWriter {
	// Setup service
	var (
		logBuf bytes.Buffer

		respSetter goatest.ResponseSetterFunc = func(r interface{}) {}
	)
	if service == nil {
		service = goatest.Service(&logBuf, respSetter)
	} else {
		logger := log.New(&logBuf, "", log.Ltime)
		service.WithLogger(goa.NewLogger(logger))
		newEncoder := func(io.Writer) goa.Encoder { return respSetter }
		service.Encoder = goa.NewHTTPEncoder() // Make sure the code ends up using this decoder
		service.Encoder.Register(newEncoder, "*/*")
	}

	// Setup request context
	rw := httptest.NewRecorder()
	query := url.Values{}
	if app_ != nil {
		sliceVal := []string{fmt.Sprintf("%v", *app_)}
		query["app"] = sliceVal
	}
	{
		sliceVal := []string{appName}
		query["appName"] = sliceVal
	}
	if rerequestPermissions != nil {
		sliceVal := []string{fmt.Sprintf("%v", *rerequestPermissions)}
		query["rerequestPermissions"] = sliceVal
	}
	u := &url.URL{
		Path:     fmt.Sprintf("/v1/oauth/init/%v", provider),
		RawQuery: query.Encode(),
	}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		panic("invalid test " + err.Error()) // bug
	}
	prms := url.Values{}
	prms["provider"] = []string{fmt.Sprintf("%v", provider)}
	if app_ != nil {
		sliceVal := []string{fmt.Sprintf("%v", *app_)}
		prms["app"] = sliceVal
	}
	{
		sliceVal := []string{appName}
		prms["appName"] = sliceVal
	}
	if rerequestPermissions != nil {
		sliceVal := []string{fmt.Sprintf("%v", *rerequestPermissions)}
		prms["rerequestPermissions"] = sliceVal
	}
	if ctx == nil {
		ctx = context.Background()
	}
	goaCtx := goa.NewContext(goa.WithAction(ctx, "OauthTest"), rw, req, prms)
	initCtx, _err := app.NewInitOauthContext(goaCtx, req, service)
	if _err != nil {
		e, ok := _err.(goa.ServiceError)
		if !ok {
			panic("invalid test data " + _err.Error()) // bug
		}
		t.Errorf("unexpected parameter validation error: %+v", e)
		return nil
	}

	// Perform action
	_err = ctrl.Init(initCtx)

	// Validate response
	if _err != nil {
		t.Fatalf("controller returned %+v, logs:\n%s", _err, logBuf.String())
	}
	if rw.Code != 204 {
		t.Errorf("invalid response status code: got %+v, expected 204", rw.Code)
	}

	// Return results
	return rw
}
